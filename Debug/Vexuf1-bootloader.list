
Vexuf1-bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008784  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008918  08008918  00009918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ddc  08008ddc  00009ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008dec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000000c  08008df8  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200003f4  08008df8  0000a3f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa34  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e7  00000000  00000000  00019a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b32  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195a9  00000000  00000000  0001e892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d16  00000000  00000000  00037e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090086  00000000  00000000  0004db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddbd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a98  00000000  00000000  000ddc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e16b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008900 	.word	0x08008900

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08008900 	.word	0x08008900

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <MX_DMA_Init+0x4c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <MX_DMA_Init+0x4c>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <MX_DMA_Init+0x4c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	203b      	movs	r0, #59	@ 0x3b
 80004ec:	f000 feb3 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80004f0:	203b      	movs	r0, #59	@ 0x3b
 80004f2:	f000 fecc 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	2045      	movs	r0, #69	@ 0x45
 80004fc:	f000 feab 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000500:	2045      	movs	r0, #69	@ 0x45
 8000502:	f000 fec4 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b3a      	ldr	r3, [pc, #232]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a39      	ldr	r2, [pc, #228]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b37      	ldr	r3, [pc, #220]	@ (8000618 <MX_GPIO_Init+0x104>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b33      	ldr	r3, [pc, #204]	@ (8000618 <MX_GPIO_Init+0x104>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a32      	ldr	r2, [pc, #200]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b30      	ldr	r3, [pc, #192]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a2b      	ldr	r2, [pc, #172]	@ (8000618 <MX_GPIO_Init+0x104>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a24      	ldr	r2, [pc, #144]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_GPIO_Init+0x104>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <MX_GPIO_Init+0x104>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_GPIO_Init+0x104>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Error_Pin|Warn_Pin|Info_Pin|sd_led_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	210f      	movs	r1, #15
 80005ba:	4818      	ldr	r0, [pc, #96]	@ (800061c <MX_GPIO_Init+0x108>)
 80005bc:	f001 fea4 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Error_Pin|Warn_Pin|Info_Pin|sd_led_Pin;
 80005c0:	230f      	movs	r3, #15
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <MX_GPIO_Init+0x108>)
 80005d8:	f001 fcfa 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 80005dc:	2304      	movs	r3, #4
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MX_GPIO_Init+0x10c>)
 80005f0:	f001 fcee 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_Det_Pin;
 80005f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_Det_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <MX_GPIO_Init+0x110>)
 800060a:	f001 fce1 	bl	8001fd0 <HAL_GPIO_Init>

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	@ 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020800 	.word	0x40020800
 8000620:	40020400 	.word	0x40020400
 8000624:	40020000 	.word	0x40020000

08000628 <isBoot1High>:
void toggleIndicator(PinType pinType, int delay, int times);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int isBoot1High(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET;
 800062c:	2104      	movs	r1, #4
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <isBoot1High+0x1c>)
 8000630:	f001 fe52 	bl	80022d8 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	bf0c      	ite	eq
 800063a:	2301      	moveq	r3, #1
 800063c:	2300      	movne	r3, #0
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020400 	.word	0x40020400

08000648 <toggleIndicator>:

void toggleIndicator(PinType pinType, int delay, int times) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	73fb      	strb	r3, [r7, #15]
    uint16_t pin;
    GPIO_TypeDef *port = GPIOC;
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <toggleIndicator+0x74>)
 8000658:	617b      	str	r3, [r7, #20]

    // Determine which pin to toggle based on pinType
    switch (pinType) {
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d00c      	beq.n	800067a <toggleIndicator+0x32>
 8000660:	2b02      	cmp	r3, #2
 8000662:	dc27      	bgt.n	80006b4 <toggleIndicator+0x6c>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <toggleIndicator+0x26>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d003      	beq.n	8000674 <toggleIndicator+0x2c>
            break;
        case PIN_INFO:
            pin = Info_Pin;
            break;
        default:
            return; // Invalid pinType, exit function
 800066c:	e022      	b.n	80006b4 <toggleIndicator+0x6c>
            pin = Error_Pin;
 800066e:	2301      	movs	r3, #1
 8000670:	83fb      	strh	r3, [r7, #30]
            break;
 8000672:	e005      	b.n	8000680 <toggleIndicator+0x38>
            pin = Warn_Pin;
 8000674:	2302      	movs	r3, #2
 8000676:	83fb      	strh	r3, [r7, #30]
            break;
 8000678:	e002      	b.n	8000680 <toggleIndicator+0x38>
            pin = Info_Pin;
 800067a:	2304      	movs	r3, #4
 800067c:	83fb      	strh	r3, [r7, #30]
            break;
 800067e:	bf00      	nop
    }

    for (int i = 0; i < times * 2; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	e00b      	b.n	800069e <toggleIndicator+0x56>
        HAL_GPIO_TogglePin(port, pin);
 8000686:	8bfb      	ldrh	r3, [r7, #30]
 8000688:	4619      	mov	r1, r3
 800068a:	6978      	ldr	r0, [r7, #20]
 800068c:	f001 fe55 	bl	800233a <HAL_GPIO_TogglePin>
        HAL_Delay(delay);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fce0 	bl	8001058 <HAL_Delay>
    for (int i = 0; i < times * 2; i++) {
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	3301      	adds	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbee      	blt.n	8000686 <toggleIndicator+0x3e>
    }
    HAL_Delay(delay * 4);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcd3 	bl	8001058 <HAL_Delay>
 80006b2:	e000      	b.n	80006b6 <toggleIndicator+0x6e>
            return; // Invalid pinType, exit function
 80006b4:	bf00      	nop

}
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020800 	.word	0x40020800

080006c0 <flashFirmwareInChunks>:



int flashFirmwareInChunks(FIL *file, uint32_t fileSize) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80006cc:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80006d0:	6018      	str	r0, [r3, #0]
 80006d2:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80006d6:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 80006da:	6019      	str	r1, [r3, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	uint8_t buffer[BUFFER_SIZE];
	uint32_t bytesRead = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
	UINT readBytes;
	uint32_t address = APPLICATION_ADDRESS;
 80006e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000820 <flashFirmwareInChunks+0x160>)
 80006e4:	f8c7 3830 	str.w	r3, [r7, #2096]	@ 0x830

	toggleIndicator(PIN_WARN, 30, 3);
 80006e8:	2203      	movs	r2, #3
 80006ea:	211e      	movs	r1, #30
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ffab 	bl	8000648 <toggleIndicator>
	HAL_FLASH_Unlock();
 80006f2:	f001 f9d9 	bl	8001aa8 <HAL_FLASH_Unlock>

	//Erase the application sectors in the flash memory
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
	EraseInitStruct.Sector = FLASH_SECTOR_3; //Specify start sector number
 8000702:	2303      	movs	r3, #3
 8000704:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	EraseInitStruct.NbSectors = 3; //Specify num of sectors
 8000708:	2303      	movs	r3, #3
 800070a:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
	int res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800070e:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 8000712:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fb37 	bl	8001d8c <HAL_FLASHEx_Erase>
 800071e:	4603      	mov	r3, r0
 8000720:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828

	if (res != HAL_OK) {
 8000724:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8000728:	2b00      	cmp	r3, #0
 800072a:	d067      	beq.n	80007fc <flashFirmwareInChunks+0x13c>
		HAL_FLASH_Lock();
 800072c:	f001 f9de 	bl	8001aec <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000730:	2301      	movs	r3, #1
 8000732:	e06f      	b.n	8000814 <flashFirmwareInChunks+0x154>
	}

	// Write the new firmware in chunks
	while (bytesRead < fileSize) {
		FRESULT res = f_read(file, buffer, BUFFER_SIZE, &readBytes);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	f107 010c 	add.w	r1, r7, #12
 800073c:	f607 0238 	addw	r2, r7, #2104	@ 0x838
 8000740:	f6a2 0034 	subw	r0, r2, #2100	@ 0x834
 8000744:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000748:	6800      	ldr	r0, [r0, #0]
 800074a:	f007 fcd9 	bl	8008100 <f_read>
 800074e:	4603      	mov	r3, r0
 8000750:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
		if (res != FR_OK || readBytes == 0) {
 8000754:	f897 3827 	ldrb.w	r3, [r7, #2087]	@ 0x827
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <flashFirmwareInChunks+0xaa>
 800075c:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 8000760:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <flashFirmwareInChunks+0xb2>
			HAL_FLASH_Lock();
 800076a:	f001 f9bf 	bl	8001aec <HAL_FLASH_Lock>
			return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e050      	b.n	8000814 <flashFirmwareInChunks+0x154>
		}

		for (uint32_t i = 0; i < readBytes; i += 4) {
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8000778:	e01e      	b.n	80007b8 <flashFirmwareInChunks+0xf8>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, *(uint32_t *)(buffer + i)) != HAL_OK) {
 800077a:	f8d7 2830 	ldr.w	r2, [r7, #2096]	@ 0x830
 800077e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8000782:	18d1      	adds	r1, r2, r3
 8000784:	f107 020c 	add.w	r2, r7, #12
 8000788:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800078c:	4413      	add	r3, r2
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	461c      	mov	r4, r3
 8000794:	4615      	mov	r5, r2
 8000796:	4622      	mov	r2, r4
 8000798:	462b      	mov	r3, r5
 800079a:	2002      	movs	r0, #2
 800079c:	f001 f930 	bl	8001a00 <HAL_FLASH_Program>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <flashFirmwareInChunks+0xee>
				HAL_FLASH_Lock();
 80007a6:	f001 f9a1 	bl	8001aec <HAL_FLASH_Lock>
				return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e032      	b.n	8000814 <flashFirmwareInChunks+0x154>
		for (uint32_t i = 0; i < readBytes; i += 4) {
 80007ae:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80007b2:	3304      	adds	r3, #4
 80007b4:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80007b8:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80007bc:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f8d7 282c 	ldr.w	r2, [r7, #2092]	@ 0x82c
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3d7      	bcc.n	800077a <flashFirmwareInChunks+0xba>
			}
		}

		address += readBytes;
 80007ca:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80007ce:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f8d7 2830 	ldr.w	r2, [r7, #2096]	@ 0x830
 80007d8:	4413      	add	r3, r2
 80007da:	f8c7 3830 	str.w	r3, [r7, #2096]	@ 0x830
		bytesRead += readBytes;
 80007de:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80007e2:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 80007ec:	4413      	add	r3, r2
 80007ee:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
		toggleIndicator(PIN_WARN, 30, 3);
 80007f2:	2203      	movs	r2, #3
 80007f4:	211e      	movs	r1, #30
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff26 	bl	8000648 <toggleIndicator>
	while (bytesRead < fileSize) {
 80007fc:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 8000800:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 8000804:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d392      	bcc.n	8000734 <flashFirmwareInChunks+0x74>
	}

	HAL_FLASH_Lock();
 800080e:	f001 f96d 	bl	8001aec <HAL_FLASH_Lock>
	return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	f607 0738 	addw	r7, r7, #2104	@ 0x838
 800081a:	46bd      	mov	sp, r7
 800081c:	bdb0      	pop	{r4, r5, r7, pc}
 800081e:	bf00      	nop
 8000820:	0800c000 	.word	0x0800c000

08000824 <jumpToApplication>:

void jumpToApplication(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
	uint32_t appJumpAddress = *(__IO uint32_t *)(APPLICATION_ADDRESS + 4);
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <jumpToApplication+0x34>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	60fb      	str	r3, [r7, #12]
	void (*appResetHandler)(void) = (void (*)(void))appJumpAddress;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60bb      	str	r3, [r7, #8]

    // Deinitialize peripherals and system to reset state
	HAL_DeInit();
 8000834:	f000 fb8a 	bl	8000f4c <HAL_DeInit>
	 // Set the vector table to the application location
	SCB->VTOR = APPLICATION_ADDRESS;
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <jumpToApplication+0x38>)
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <jumpToApplication+0x3c>)
 800083c:	609a      	str	r2, [r3, #8]
	// Set the stack pointer
	__set_MSP(*(__IO uint32_t *)APPLICATION_ADDRESS);
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <jumpToApplication+0x3c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f383 8808 	msr	MSP, r3
}
 800084a:	bf00      	nop
	// Jump to application reset handler
	appResetHandler();
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4798      	blx	r3
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0800c004 	.word	0x0800c004
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	0800c000 	.word	0x0800c000

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fb4b 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f8b7 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fe4d 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f7ff fe23 	bl	80004c4 <MX_DMA_Init>
  MX_RTC_Init();
 800087e:	f000 f925 	bl	8000acc <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000882:	f000 f975 	bl	8000b70 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000886:	f004 fc9f 	bl	80051c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	if (!isBoot1High()) {
 800088a:	f7ff fecd 	bl	8000628 <isBoot1High>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <main+0x34>
		jumpToApplication();
 8000894:	f7ff ffc6 	bl	8000824 <jumpToApplication>
	}
	// Turn on the SD Card Led before accessing the SD Card.
	HAL_GPIO_WritePin(sd_led_GPIO_Port, sd_led_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2108      	movs	r1, #8
 800089c:	484e      	ldr	r0, [pc, #312]	@ (80009d8 <main+0x174>)
 800089e:	f001 fd33 	bl	8002308 <HAL_GPIO_WritePin>

	// Show the Start LED sequence.
	toggleIndicator(PIN_ERROR, 50, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2132      	movs	r1, #50	@ 0x32
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fece 	bl	8000648 <toggleIndicator>
	toggleIndicator(PIN_WARN, 50, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2132      	movs	r1, #50	@ 0x32
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fec9 	bl	8000648 <toggleIndicator>
	toggleIndicator(PIN_INFO, 50, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2132      	movs	r1, #50	@ 0x32
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff fec4 	bl	8000648 <toggleIndicator>
	FIL file;
	FRESULT res;
	uint32_t fileSize;
	FATFS FatFs;

	res = f_mount(&FatFs, SDPath, 1);
 80008c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008c4:	3b30      	subs	r3, #48	@ 0x30
 80008c6:	2201      	movs	r2, #1
 80008c8:	4944      	ldr	r1, [pc, #272]	@ (80009dc <main+0x178>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fa0a 	bl	8007ce4 <f_mount>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 80008d6:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 80008da:	7013      	strb	r3, [r2, #0]

	if (res == FR_OK) {
 80008dc:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80008e0:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d168      	bne.n	80009bc <main+0x158>
		res = f_open(&file, FILENAME, FA_READ);
 80008ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80008ee:	f103 0310 	add.w	r3, r3, #16
 80008f2:	3b18      	subs	r3, #24
 80008f4:	2201      	movs	r2, #1
 80008f6:	493a      	ldr	r1, [pc, #232]	@ (80009e0 <main+0x17c>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fa39 	bl	8007d70 <f_open>
 80008fe:	4603      	mov	r3, r0
 8000900:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000904:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8000908:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {
 800090a:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 800090e:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d151      	bne.n	80009bc <main+0x158>
			fileSize = f_size(&file);
 8000918:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800091c:	f103 0310 	add.w	r3, r3, #16
 8000920:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000924:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000928:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800092c:	6013      	str	r3, [r2, #0]
			toggleIndicator(PIN_INFO, 50, 5);
 800092e:	2205      	movs	r2, #5
 8000930:	2132      	movs	r1, #50	@ 0x32
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fe88 	bl	8000648 <toggleIndicator>
			if (flashFirmwareInChunks(&file, fileSize) == HAL_OK) {
 8000938:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800093c:	f103 0310 	add.w	r3, r3, #16
 8000940:	3b18      	subs	r3, #24
 8000942:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000946:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800094a:	6811      	ldr	r1, [r2, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff feb7 	bl	80006c0 <flashFirmwareInChunks>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d129      	bne.n	80009ac <main+0x148>
				f_close(&file);
 8000958:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800095c:	f103 0310 	add.w	r3, r3, #16
 8000960:	3b18      	subs	r3, #24
 8000962:	4618      	mov	r0, r3
 8000964:	f007 fda9 	bl	80084ba <f_close>

				// Delete the firmware file from SD Card.
				f_unlink(FILENAME);
 8000968:	481d      	ldr	r0, [pc, #116]	@ (80009e0 <main+0x17c>)
 800096a:	f007 fdd0 	bl	800850e <f_unlink>

				// Show the Success LED Sequence.
				toggleIndicator(PIN_INFO, 50, 5);
 800096e:	2205      	movs	r2, #5
 8000970:	2132      	movs	r1, #50	@ 0x32
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fe68 	bl	8000648 <toggleIndicator>
				HAL_Delay(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f000 fb6c 	bl	8001058 <HAL_Delay>
				// Turn the SD Card LED off.
				HAL_GPIO_WritePin(sd_led_GPIO_Port, sd_led_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <main+0x174>)
 8000986:	f001 fcbf 	bl	8002308 <HAL_GPIO_WritePin>

				// Show the End LED sequence.
				toggleIndicator(PIN_INFO, 50, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	2132      	movs	r1, #50	@ 0x32
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fe5a 	bl	8000648 <toggleIndicator>
				toggleIndicator(PIN_WARN, 50, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	2132      	movs	r1, #50	@ 0x32
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fe55 	bl	8000648 <toggleIndicator>
				toggleIndicator(PIN_ERROR, 50, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2132      	movs	r1, #50	@ 0x32
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fe50 	bl	8000648 <toggleIndicator>


				jumpToApplication();
 80009a8:	f7ff ff3c 	bl	8000824 <jumpToApplication>
	    	}
			f_close(&file);
 80009ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80009b0:	f103 0310 	add.w	r3, r3, #16
 80009b4:	3b18      	subs	r3, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f007 fd7f 	bl	80084ba <f_close>
	    }

	}

	// Reaching this code means there was an error.
	toggleIndicator(PIN_ERROR, 50, 5);
 80009bc:	2205      	movs	r2, #5
 80009be:	2132      	movs	r1, #50	@ 0x32
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fe41 	bl	8000648 <toggleIndicator>
	// Turn the SD Card LED off.
	HAL_GPIO_WritePin(sd_led_GPIO_Port, sd_led_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <main+0x174>)
 80009cc:	f001 fc9c 	bl	8002308 <HAL_GPIO_WritePin>
	jumpToApplication();
 80009d0:	f7ff ff28 	bl	8000824 <jumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <main+0x170>
 80009d8:	40020800 	.word	0x40020800
 80009dc:	200001b4 	.word	0x200001b4
 80009e0:	08008918 	.word	0x08008918

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	@ 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	@ 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 ff58 	bl	80088a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a29      	ldr	r2, [pc, #164]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a30:	4a22      	ldr	r2, [pc, #136]	@ (8000abc <SystemClock_Config+0xd8>)
 8000a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a44:	2305      	movs	r3, #5
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000a60:	2354      	movs	r3, #84	@ 0x54
 8000a62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc7d 	bl	8002370 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 f820 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fedf 	bl	8002860 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aa8:	f000 f80a 	bl	8000ac0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000aac:	f001 ffbe 	bl	8002a2c <HAL_RCC_EnableCSS>
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	@ 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <MX_RTC_Init+0x48>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000ade:	227f      	movs	r2, #127	@ 0x7f
 8000ae0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000ae4:	22ff      	movs	r2, #255	@ 0xff
 8000ae6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_RTC_Init+0x44>)
 8000afc:	f002 f9b0 	bl	8002e60 <HAL_RTC_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b06:	f7ff ffdb 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000028 	.word	0x20000028
 8000b14:	40002800 	.word	0x40002800

08000b18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <HAL_RTC_MspInit+0x50>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d111      	bne.n	8000b5e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b42:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 f89b 	bl	8002c84 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b54:	f7ff ffb4 	bl	8000ac0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <HAL_RTC_MspInit+0x54>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40002800 	.word	0x40002800
 8000b6c:	42470e3c 	.word	0x42470e3c

08000b70 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDIO_Init 0 */
	hsd.Instance = SDIO;
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b76:	4a11      	ldr	r2, [pc, #68]	@ (8000bbc <MX_SDIO_SD_Init+0x4c>)
 8000b78:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */
	if (HAL_SD_Init(&hsd) == HAL_OK) {
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000ba0:	f002 fa64 	bl	800306c <HAL_SD_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <MX_SDIO_SD_Init+0x44>
		HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 8000baa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bae:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <MX_SDIO_SD_Init+0x48>)
 8000bb0:	f003 f834 	bl	8003c1c <HAL_SD_ConfigWideBusOperation>
  /* USER CODE END SDIO_Init 1 */
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000048 	.word	0x20000048
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a68      	ldr	r2, [pc, #416]	@ (8000d80 <HAL_SD_MspInit+0x1c0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 80c9 	bne.w	8000d76 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bec:	4a65      	ldr	r2, [pc, #404]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000bee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf4:	4b63      	ldr	r3, [pc, #396]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b5f      	ldr	r3, [pc, #380]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a5e      	ldr	r2, [pc, #376]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c10:	4b5c      	ldr	r3, [pc, #368]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b58      	ldr	r3, [pc, #352]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	4a57      	ldr	r2, [pc, #348]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2c:	4b55      	ldr	r3, [pc, #340]	@ (8000d84 <HAL_SD_MspInit+0x1c4>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c38:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000c3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	484c      	ldr	r0, [pc, #304]	@ (8000d88 <HAL_SD_MspInit+0x1c8>)
 8000c56:	f001 f9bb 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4845      	ldr	r0, [pc, #276]	@ (8000d8c <HAL_SD_MspInit+0x1cc>)
 8000c76:	f001 f9ab 	bl	8001fd0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c7c:	4a45      	ldr	r2, [pc, #276]	@ (8000d94 <HAL_SD_MspInit+0x1d4>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000c80:	4b43      	ldr	r3, [pc, #268]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c88:	4b41      	ldr	r3, [pc, #260]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b40      	ldr	r3, [pc, #256]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b3e      	ldr	r3, [pc, #248]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000c9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000cac:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cae:	2220      	movs	r2, #32
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cb8:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cbe:	4b34      	ldr	r3, [pc, #208]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ccc:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cce:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000cd4:	482e      	ldr	r0, [pc, #184]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cd6:	f000 faf5 	bl	80012c4 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000ce0:	f7ff feee 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cea:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <HAL_SD_MspInit+0x1d0>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000cf0:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d9c <HAL_SD_MspInit+0x1dc>)
 8000cf4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000cf6:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000cf8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cfc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d00:	2240      	movs	r2, #64	@ 0x40
 8000d02:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d24:	2220      	movs	r2, #32
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d44:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d4a:	4813      	ldr	r0, [pc, #76]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d4c:	f000 faba 	bl	80012c4 <HAL_DMA_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000d56:	f7ff feb3 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_SD_MspInit+0x1d8>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2031      	movs	r0, #49	@ 0x31
 8000d6c:	f000 fa73 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000d70:	2031      	movs	r0, #49	@ 0x31
 8000d72:	f000 fa8c 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	200000cc 	.word	0x200000cc
 8000d94:	40026458 	.word	0x40026458
 8000d98:	2000012c 	.word	0x2000012c
 8000d9c:	400264a0 	.word	0x400264a0

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000df4:	f001 ff2a 	bl	8002c4c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x8>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f8e5 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <SDIO_IRQHandler+0x10>)
 8000e5a:	f002 fb7f 	bl	800355c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000048 	.word	0x20000048

08000e68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <DMA2_Stream3_IRQHandler+0x10>)
 8000e6e:	f000 fb51 	bl	8001514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000cc 	.word	0x200000cc

08000e7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <DMA2_Stream6_IRQHandler+0x10>)
 8000e82:	f000 fb47 	bl	8001514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000012c 	.word	0x2000012c

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f007 fce9 	bl	80088b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fcbd 	bl	8000864 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ef8:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8000efc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f00:	200003f4 	.word	0x200003f4

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f985 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f000 f83e 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff ff30 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <HAL_DeInit+0x50>)
 8000f54:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_DeInit+0x54>)
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_DeInit+0x58>)
 8000f6c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f86:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f8e:	f000 f80b 	bl	8000fa8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	10e2c80f 	.word	0x10e2c80f
 8000fa0:	00077931 	.word	0x00077931
 8000fa4:	0060109f 	.word	0x0060109f

08000fa8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f967 	bl	80012aa <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff4:	f000 f92f 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	2000018c 	.word	0x2000018c

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000018c 	.word	0x2000018c

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	@ (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff29 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff3e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff feb6 	bl	8001040 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e099      	b.n	8001414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001300:	e00f      	b.n	8001322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001302:	f7ff fe9d 	bl	8001040 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b05      	cmp	r3, #5
 800130e:	d908      	bls.n	8001322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2220      	movs	r2, #32
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e078      	b.n	8001414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e8      	bne.n	8001302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4b38      	ldr	r3, [pc, #224]	@ (800141c <HAL_DMA_Init+0x158>)
 800133c:	4013      	ands	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	2b04      	cmp	r3, #4
 800137a:	d107      	bne.n	800138c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4313      	orrs	r3, r2
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f023 0307 	bic.w	r3, r3, #7
 80013a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d117      	bne.n	80013e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00e      	beq.n	80013e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fa9d 	bl	8001908 <DMA_CheckFifoParam>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2240      	movs	r2, #64	@ 0x40
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013e2:	2301      	movs	r3, #1
 80013e4:	e016      	b.n	8001414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa54 	bl	800189c <DMA_CalcBaseAndBitshift>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fc:	223f      	movs	r2, #63	@ 0x3f
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f010803f 	.word	0xf010803f

08001420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_DMA_Start_IT+0x26>
 8001442:	2302      	movs	r3, #2
 8001444:	e040      	b.n	80014c8 <HAL_DMA_Start_IT+0xa8>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d12f      	bne.n	80014ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2202      	movs	r2, #2
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f9e6 	bl	8001840 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001478:	223f      	movs	r2, #63	@ 0x3f
 800147a:	409a      	lsls	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0216 	orr.w	r2, r2, #22
 800148e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0208 	orr.w	r2, r2, #8
 80014a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e005      	b.n	80014c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014c2:	2302      	movs	r3, #2
 80014c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00c      	b.n	8001508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001520:	4b8e      	ldr	r3, [pc, #568]	@ (800175c <HAL_DMA_IRQHandler+0x248>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a8e      	ldr	r2, [pc, #568]	@ (8001760 <HAL_DMA_IRQHandler+0x24c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153e:	2208      	movs	r2, #8
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0204 	bic.w	r2, r2, #4
 8001566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156c:	2208      	movs	r2, #8
 800156e:	409a      	lsls	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001584:	2201      	movs	r2, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	f043 0202 	orr.w	r2, r3, #2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ba:	2204      	movs	r2, #4
 80015bc:	409a      	lsls	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	2204      	movs	r2, #4
 80015da:	409a      	lsls	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e4:	f043 0204 	orr.w	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f0:	2210      	movs	r2, #16
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d043      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03c      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	2210      	movs	r2, #16
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d018      	beq.n	8001656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d108      	bne.n	8001644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d024      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
 8001642:	e01f      	b.n	8001684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
 8001654:	e016      	b.n	8001684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0208 	bic.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	2220      	movs	r2, #32
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 808f 	beq.w	80017b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8087 	beq.w	80017b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	2220      	movs	r2, #32
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d136      	bne.n	800172c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0216 	bic.w	r2, r2, #22
 80016cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <HAL_DMA_IRQHandler+0x1da>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0208 	bic.w	r2, r2, #8
 80016fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001702:	223f      	movs	r2, #63	@ 0x3f
 8001704:	409a      	lsls	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800171e:	2b00      	cmp	r3, #0
 8001720:	d07e      	beq.n	8001820 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
        }
        return;
 800172a:	e079      	b.n	8001820 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01d      	beq.n	8001776 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	2b00      	cmp	r3, #0
 800174e:	d031      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
 8001758:	e02c      	b.n	80017b4 <HAL_DMA_IRQHandler+0x2a0>
 800175a:	bf00      	nop
 800175c:	20000000 	.word	0x20000000
 8001760:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
 8001774:	e01e      	b.n	80017b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0210 	bic.w	r2, r2, #16
 8001792:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d032      	beq.n	8001822 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d022      	beq.n	800180e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2205      	movs	r2, #5
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d307      	bcc.n	80017fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f2      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x2cc>
 80017fa:	e000      	b.n	80017fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
 800181e:	e000      	b.n	8001822 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001820:	bf00      	nop
    }
  }
}
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800185c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b40      	cmp	r3, #64	@ 0x40
 800186c:	d108      	bne.n	8001880 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800187e:	e007      	b.n	8001890 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b10      	subs	r3, #16
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <DMA_CalcBaseAndBitshift+0x64>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <DMA_CalcBaseAndBitshift+0x68>)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d909      	bls.n	80018de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018d2:	f023 0303 	bic.w	r3, r3, #3
 80018d6:	1d1a      	adds	r2, r3, #4
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	659a      	str	r2, [r3, #88]	@ 0x58
 80018dc:	e007      	b.n	80018ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	aaaaaaab 	.word	0xaaaaaaab
 8001904:	08008980 	.word	0x08008980

08001908 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d11f      	bne.n	8001962 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d856      	bhi.n	80019d6 <DMA_CheckFifoParam+0xce>
 8001928:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <DMA_CheckFifoParam+0x28>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001941 	.word	0x08001941
 8001934:	08001953 	.word	0x08001953
 8001938:	08001941 	.word	0x08001941
 800193c:	080019d7 	.word	0x080019d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d046      	beq.n	80019da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001950:	e043      	b.n	80019da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800195a:	d140      	bne.n	80019de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001960:	e03d      	b.n	80019de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800196a:	d121      	bne.n	80019b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d837      	bhi.n	80019e2 <DMA_CheckFifoParam+0xda>
 8001972:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <DMA_CheckFifoParam+0x70>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001989 	.word	0x08001989
 800197c:	0800198f 	.word	0x0800198f
 8001980:	08001989 	.word	0x08001989
 8001984:	080019a1 	.word	0x080019a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      break;
 800198c:	e030      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d025      	beq.n	80019e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199e:	e022      	b.n	80019e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019a8:	d11f      	bne.n	80019ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ae:	e01c      	b.n	80019ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d903      	bls.n	80019be <DMA_CheckFifoParam+0xb6>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d003      	beq.n	80019c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019bc:	e018      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      break;
 80019c2:	e015      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      break;
 80019d4:	e00b      	b.n	80019ee <DMA_CheckFifoParam+0xe6>
      break;
 80019d6:	bf00      	nop
 80019d8:	e00a      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;
 80019da:	bf00      	nop
 80019dc:	e008      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;
 80019de:	bf00      	nop
 80019e0:	e006      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;
 80019e2:	bf00      	nop
 80019e4:	e004      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;
 80019e6:	bf00      	nop
 80019e8:	e002      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ea:	bf00      	nop
 80019ec:	e000      	b.n	80019f0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
    }
  } 
  
  return status; 
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a14:	7e1b      	ldrb	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_FLASH_Program+0x1e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e03b      	b.n	8001a96 <HAL_FLASH_Program+0x96>
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a28:	f000 f870 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12b      	bne.n	8001a8e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f000 f91b 	bl	8001c7c <FLASH_Program_Byte>
 8001a46:	e016      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a4e:	883b      	ldrh	r3, [r7, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	68b8      	ldr	r0, [r7, #8]
 8001a54:	f000 f8ee 	bl	8001c34 <FLASH_Program_HalfWord>
 8001a58:	e00d      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d105      	bne.n	8001a6c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f000 f8c3 	bl	8001bf0 <FLASH_Program_Word>
 8001a6a:	e004      	b.n	8001a76 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a70:	68b8      	ldr	r0, [r7, #8]
 8001a72:	f000 f88b 	bl	8001b8c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a7a:	f000 f847 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_FLASH_Program+0xa4>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_FLASH_Program+0xa4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <HAL_FLASH_Program+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000190 	.word	0x20000190
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0b      	bge.n	8001ad2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_FLASH_Unlock+0x3c>)
 8001abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_FLASH_Unlock+0x38>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da01      	bge.n	8001ad2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	45670123 	.word	0x45670123
 8001ae8:	cdef89ab 	.word	0xcdef89ab

08001aec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_FLASH_Lock+0x1c>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_FLASH_Lock+0x1c>)
 8001af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001afa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <FLASH_WaitForLastOperation+0x78>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1e:	f7ff fa8f 	bl	8001040 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b24:	e010      	b.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b2c:	d00c      	beq.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <FLASH_WaitForLastOperation+0x38>
 8001b34:	f7ff fa84 	bl	8001040 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d201      	bcs.n	8001b48 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e019      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b66:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <FLASH_WaitForLastOperation+0x7c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b72:	f000 f8a5 	bl	8001cc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
  
}  
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000190 	.word	0x20000190
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a10      	ldr	r2, [pc, #64]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001baa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <FLASH_Program_DoubleWord+0x60>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001bc2:	f3bf 8f6f 	isb	sy
}
 8001bc6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	3104      	adds	r1, #4
 8001bdc:	4613      	mov	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <FLASH_Program_Word+0x40>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <FLASH_Program_HalfWord+0x44>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	801a      	strh	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <FLASH_Program_Byte+0x40>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	701a      	strb	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001cda:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001cde:	2210      	movs	r2, #16
 8001ce0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ce2:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001cf8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d34:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <FLASH_SetErrorCode+0xc8>)
 8001d72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <FLASH_SetErrorCode+0xc4>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	60da      	str	r2, [r3, #12]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40023c00 	.word	0x40023c00
 8001d88:	20000190 	.word	0x20000190

08001d8c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d9e:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <HAL_FLASHEx_Erase+0xd8>)
 8001da0:	7e1b      	ldrb	r3, [r3, #24]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_FLASHEx_Erase+0x1e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e058      	b.n	8001e5c <HAL_FLASHEx_Erase+0xd0>
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_FLASHEx_Erase+0xd8>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001db4:	f7ff feaa 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d148      	bne.n	8001e54 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 f844 	bl	8001e6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001de8:	f7ff fe90 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6113      	str	r3, [r2, #16]
 8001dfc:	e028      	b.n	8001e50 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	e01c      	b.n	8001e40 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f000 f850 	bl	8001eb4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e18:	f7ff fe78 	bl	8001b0c <FLASH_WaitForLastOperation>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_FLASHEx_Erase+0xdc>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <HAL_FLASHEx_Erase+0xdc>)
 8001e26:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001e2a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	601a      	str	r2, [r3, #0]
          break;
 8001e38:	e00a      	b.n	8001e50 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3da      	bcc.n	8001e06 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e50:	f000 f878 	bl	8001f44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_FLASHEx_Erase+0xd8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	761a      	strb	r2, [r3, #24]

  return status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000190 	.word	0x20000190
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <FLASH_MassErase+0x44>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6113      	str	r3, [r2, #16]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e010      	b.n	8001ef2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d103      	bne.n	8001ede <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e009      	b.n	8001ef2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d103      	bne.n	8001eec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e002      	b.n	8001ef2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001eec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001efc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	490f      	ldr	r1, [pc, #60]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f10:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001f14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <FLASH_Erase_Sector+0x8c>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f32:	6113      	str	r3, [r2, #16]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f5a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f82:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d017      	beq.n	8001fc0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f9a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001fa2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fb2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <FLASH_FlushCaches+0x88>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e159      	b.n	80022a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 8148 	bne.w	800229a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d005      	beq.n	8002022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	2b02      	cmp	r3, #2
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b03      	cmp	r3, #3
 800208e:	d017      	beq.n	80020c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d123      	bne.n	8002114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a2 	beq.w	800229a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b57      	ldr	r3, [pc, #348]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	4a56      	ldr	r2, [pc, #344]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002164:	6453      	str	r3, [r2, #68]	@ 0x44
 8002166:	4b54      	ldr	r3, [pc, #336]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002172:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_GPIO_Init+0x2ec>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a49      	ldr	r2, [pc, #292]	@ (80022c0 <HAL_GPIO_Init+0x2f0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x202>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a48      	ldr	r2, [pc, #288]	@ (80022c4 <HAL_GPIO_Init+0x2f4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x1fe>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a47      	ldr	r2, [pc, #284]	@ (80022c8 <HAL_GPIO_Init+0x2f8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x1fa>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a46      	ldr	r2, [pc, #280]	@ (80022cc <HAL_GPIO_Init+0x2fc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x1f6>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a45      	ldr	r2, [pc, #276]	@ (80022d0 <HAL_GPIO_Init+0x300>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x1f2>
 80021be:	2304      	movs	r3, #4
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x204>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x204>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x204>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x204>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x204>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	@ (80022bc <HAL_GPIO_Init+0x2ec>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a2f      	ldr	r2, [pc, #188]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1a      	ldr	r2, [pc, #104]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a0f      	ldr	r2, [pc, #60]	@ (80022d4 <HAL_GPIO_Init+0x304>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f aea2 	bls.w	8001fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40013c00 	.word	0x40013c00

080022d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e001      	b.n	80022fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43d9      	mvns	r1, r3
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e267      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d075      	beq.n	800247a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d00c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b82      	ldr	r3, [pc, #520]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b2:	d10b      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	4b7e      	ldr	r3, [pc, #504]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05b      	beq.n	8002478 <HAL_RCC_OscConfig+0x108>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d157      	bne.n	8002478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e242      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x74>
 80023d6:	4b76      	ldr	r3, [pc, #472]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a75      	ldr	r2, [pc, #468]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xb0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x98>
 80023ee:	4b70      	ldr	r3, [pc, #448]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6f      	ldr	r2, [pc, #444]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b6d      	ldr	r3, [pc, #436]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6c      	ldr	r2, [pc, #432]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xb0>
 8002408:	4b69      	ldr	r3, [pc, #420]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a68      	ldr	r2, [pc, #416]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a65      	ldr	r2, [pc, #404]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fe0a 	bl	8001040 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fe06 	bl	8001040 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e207      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xc0>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fdf6 	bl	8001040 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fdf2 	bl	8001040 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1f3      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b51      	ldr	r3, [pc, #324]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d063      	beq.n	800254e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249e:	4b44      	ldr	r3, [pc, #272]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x152>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1c7      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4937      	ldr	r1, [pc, #220]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e03a      	b.n	800254e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0x244>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fdab 	bl	8001040 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fda7 	bl	8001040 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1a8      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4925      	ldr	r1, [pc, #148]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x244>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fd8a 	bl	8001040 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002530:	f7fe fd86 	bl	8001040 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e187      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_RCC_OscConfig+0x248>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fd6a 	bl	8001040 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002570:	f7fe fd66 	bl	8001040 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e167      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x200>
 800258e:	e01b      	b.n	80025c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_OscConfig+0x248>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fd53 	bl	8001040 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	e00e      	b.n	80025bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe fd4f 	bl	8001040 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d907      	bls.n	80025bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e150      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	42470000 	.word	0x42470000
 80025b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ea      	bne.n	800259e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8097 	beq.w	8002704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b81      	ldr	r3, [pc, #516]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b7d      	ldr	r3, [pc, #500]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a7c      	ldr	r2, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b7a      	ldr	r3, [pc, #488]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b77      	ldr	r3, [pc, #476]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b74      	ldr	r3, [pc, #464]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a73      	ldr	r2, [pc, #460]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd0f 	bl	8001040 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe fd0b 	bl	8001040 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e10c      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b6a      	ldr	r3, [pc, #424]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x2ea>
 800264c:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	4a63      	ldr	r2, [pc, #396]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	@ 0x70
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x324>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x30c>
 8002662:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a5e      	ldr	r2, [pc, #376]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	4b5c      	ldr	r3, [pc, #368]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	4a5b      	ldr	r2, [pc, #364]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	@ 0x70
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x324>
 800267c:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
 8002688:	4b55      	ldr	r3, [pc, #340]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4a54      	ldr	r2, [pc, #336]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fcd0 	bl	8001040 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe fccc 	bl	8001040 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0cb      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	4b49      	ldr	r3, [pc, #292]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ee      	beq.n	80026a4 <HAL_RCC_OscConfig+0x334>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fcba 	bl	8001040 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fcb6 	bl	8001040 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0b5      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	4b3e      	ldr	r3, [pc, #248]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ee      	bne.n	80026d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b39      	ldr	r3, [pc, #228]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4a38      	ldr	r2, [pc, #224]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a1 	beq.w	8002850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270e:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d05c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d141      	bne.n	80027a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fc8a 	bl	8001040 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc86 	bl	8001040 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e087      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	491b      	ldr	r1, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe fc5f 	bl	8001040 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fc5b 	bl	8001040 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e05c      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x416>
 80027a4:	e054      	b.n	8002850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fc48 	bl	8001040 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe fc44 	bl	8001040 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e045      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x444>
 80027d2:	e03d      	b.n	8002850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e038      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4ec>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d028      	beq.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d121      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d11a      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002824:	4293      	cmp	r3, r2
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0cc      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d90c      	bls.n	800289c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b65      	ldr	r3, [pc, #404]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d119      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	2b03      	cmp	r3, #3
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e067      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4934      	ldr	r1, [pc, #208]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fe fb76 	bl	8001040 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fe fb72 	bl	8001040 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20c      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f82d 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fad6 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08008970 	.word	0x08008970
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a30:	4b03      	ldr	r3, [pc, #12]	@ (8002a40 <HAL_RCC_EnableCSS+0x14>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	4247004c 	.word	0x4247004c

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a48:	b094      	sub	sp, #80	@ 0x50
 8002a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a50:	2300      	movs	r3, #0
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a54:	2300      	movs	r3, #0
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	4b79      	ldr	r3, [pc, #484]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d00d      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x40>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	f200 80e1 	bhi.w	8002c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a76:	e0db      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b73      	ldr	r3, [pc, #460]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002a7c:	e0db      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a82:	e0d8      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a84:	4b6f      	ldr	r3, [pc, #444]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	462b      	mov	r3, r5
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	0159      	lsls	r1, r3, #5
 8002ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac8:	0150      	lsls	r0, r2, #5
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4621      	mov	r1, r4
 8002ad0:	1a51      	subs	r1, r2, r1
 8002ad2:	6139      	str	r1, [r7, #16]
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae8:	4659      	mov	r1, fp
 8002aea:	018b      	lsls	r3, r1, #6
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af2:	4651      	mov	r1, sl
 8002af4:	018a      	lsls	r2, r1, #6
 8002af6:	4651      	mov	r1, sl
 8002af8:	ebb2 0801 	subs.w	r8, r2, r1
 8002afc:	4659      	mov	r1, fp
 8002afe:	eb63 0901 	sbc.w	r9, r3, r1
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b16:	4690      	mov	r8, r2
 8002b18:	4699      	mov	r9, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	eb18 0303 	adds.w	r3, r8, r3
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	462b      	mov	r3, r5
 8002b24:	eb49 0303 	adc.w	r3, r9, r3
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b36:	4629      	mov	r1, r5
 8002b38:	028b      	lsls	r3, r1, #10
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b40:	4621      	mov	r1, r4
 8002b42:	028a      	lsls	r2, r1, #10
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b54:	f7fd fb3e 	bl	80001d4 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b60:	e058      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b38      	ldr	r3, [pc, #224]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	f04f 0000 	mov.w	r0, #0
 8002b84:	f04f 0100 	mov.w	r1, #0
 8002b88:	0159      	lsls	r1, r3, #5
 8002b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8e:	0150      	lsls	r0, r2, #5
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4641      	mov	r1, r8
 8002b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	00eb      	lsls	r3, r5, #3
 8002bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bca:	00e2      	lsls	r2, r4, #3
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
 8002bd0:	4643      	mov	r3, r8
 8002bd2:	18e3      	adds	r3, r4, r3
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	eb45 0303 	adc.w	r3, r5, r3
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bea:	4629      	mov	r1, r5
 8002bec:	028b      	lsls	r3, r1, #10
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	028a      	lsls	r2, r1, #10
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	61fa      	str	r2, [r7, #28]
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	f7fd fae4 	bl	80001d4 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4613      	mov	r3, r2
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c2e:	e002      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3750      	adds	r7, #80	@ 0x50
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	00f42400 	.word	0x00f42400

08002c4c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c58:	2b80      	cmp	r3, #128	@ 0x80
 8002c5a:	d104      	bne.n	8002c66 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c5c:	f000 f80a 	bl	8002c74 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c62:	2280      	movs	r2, #128	@ 0x80
 8002c64:	701a      	strb	r2, [r3, #0]
  }
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	4002380e 	.word	0x4002380e

08002c74 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d035      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cac:	4b67      	ldr	r3, [pc, #412]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe f9c5 	bl	8001040 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cba:	f7fe f9c1 	bl	8001040 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0ba      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	019a      	lsls	r2, r3, #6
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	071b      	lsls	r3, r3, #28
 8002ce4:	495a      	ldr	r1, [pc, #360]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cec:	4b57      	ldr	r3, [pc, #348]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe f9a5 	bl	8001040 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cfa:	f7fe f9a1 	bl	8001040 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e09a      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8083 	beq.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a48      	ldr	r2, [pc, #288]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b46      	ldr	r3, [pc, #280]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d42:	4b44      	ldr	r3, [pc, #272]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a43      	ldr	r2, [pc, #268]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe f977 	bl	8001040 <HAL_GetTick>
 8002d52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe f973 	bl	8001040 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e06c      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d68:	4b3a      	ldr	r3, [pc, #232]	@ (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d74:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02f      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d028      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002da8:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d114      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe f941 	bl	8001040 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f93d 	bl	8001040 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e034      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e06:	4912      	ldr	r1, [pc, #72]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]
 8002e0c:	e005      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4a0f      	ldr	r2, [pc, #60]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e18:	6093      	str	r3, [r2, #8]
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	490a      	ldr	r1, [pc, #40]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7c1a      	ldrb	r2, [r3, #16]
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e3e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	42470068 	.word	0x42470068
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42470e40 	.word	0x42470e40
 8002e5c:	424711e0 	.word	0x424711e0

08002e60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e073      	b.n	8002f5e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7f5b      	ldrb	r3, [r3, #29]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fe46 	bl	8000b18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d055      	beq.n	8002f4c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	22ca      	movs	r2, #202	@ 0xca
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2253      	movs	r2, #83	@ 0x53
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f87f 	bl	8002fb4 <RTC_EnterInitMode>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d12c      	bne.n	8002f1a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68d2      	ldr	r2, [r2, #12]
 8002efa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	041a      	lsls	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f886 	bl	8003022 <RTC_ExitInitMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d110      	bne.n	8002f42 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	22ff      	movs	r2, #255	@ 0xff
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f4a:	e001      	b.n	8002f50 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <HAL_RTC_WaitForSynchro+0x48>)
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7fe f860 	bl	8001040 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f82:	e009      	b.n	8002f98 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f84:	f7fe f85c 	bl	8001040 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f92:	d901      	bls.n	8002f98 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e007      	b.n	8002fa8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ee      	beq.n	8002f84 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	00013f5f 	.word	0x00013f5f

08002fb4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d122      	bne.n	8003018 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fe0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe2:	f7fe f82d 	bl	8001040 <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fe8:	e00c      	b.n	8003004 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fea:	f7fe f829 	bl	8001040 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff8:	d904      	bls.n	8003004 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <RTC_EnterInitMode+0x64>
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d1e8      	bne.n	8002fea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff8b 	bl	8002f68 <HAL_RTC_WaitForSynchro>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2204      	movs	r2, #4
 800305c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e022      	b.n	80030c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd fd95 	bl	8000bc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f814 	bl	80030cc <HAL_SD_InitCard>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00a      	b.n	80030c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b08e      	sub	sp, #56	@ 0x38
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030e8:	2376      	movs	r3, #118	@ 0x76
 80030ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681d      	ldr	r5, [r3, #0]
 80030f0:	466c      	mov	r4, sp
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003104:	4628      	mov	r0, r5
 8003106:	f001 faeb 	bl	80046e0 <SDIO_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e04f      	b.n	80031bc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800311c:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <HAL_SD_InitCard+0xf8>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f001 fb23 	bl	8004772 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <HAL_SD_InitCard+0xf8>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003132:	2002      	movs	r0, #2
 8003134:	f7fd ff90 	bl	8001058 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f001 f805 	bl	8004148 <SD_PowerON>
 800313e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02e      	b.n	80031bc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 ff24 	bl	8003fac <SD_InitCard>
 8003164:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e01b      	b.n	80031bc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fb82 	bl	8004896 <SDMMC_CmdBlockLength>
 8003192:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00f      	beq.n	80031ba <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <HAL_SD_InitCard+0xfc>)
 80031a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3728      	adds	r7, #40	@ 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdb0      	pop	{r4, r5, r7, pc}
 80031c4:	422580a0 	.word	0x422580a0
 80031c8:	004005ff 	.word	0x004005ff

080031cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08c      	sub	sp, #48	@ 0x30
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0c0      	b.n	8003376 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 80b9 	bne.w	8003374 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	429a      	cmp	r2, r3
 8003214:	d907      	bls.n	8003226 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0a7      	b.n	8003376 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	4a4c      	ldr	r2, [pc, #304]	@ (8003380 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	4a4b      	ldr	r2, [pc, #300]	@ (8003384 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003258:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2200      	movs	r2, #0
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3380      	adds	r3, #128	@ 0x80
 8003290:	4619      	mov	r1, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	025b      	lsls	r3, r3, #9
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	f7fe f8c1 	bl	8001420 <HAL_DMA_Start_IT>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d017      	beq.n	80032d4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e050      	b.n	8003376 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80032d4:	4b2d      	ldr	r3, [pc, #180]	@ (800338c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d002      	beq.n	80032e8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	025b      	lsls	r3, r3, #9
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	025b      	lsls	r3, r3, #9
 80032f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032f4:	2390      	movs	r3, #144	@ 0x90
 80032f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003300:	2301      	movs	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f107 0210 	add.w	r2, r7, #16
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fa95 	bl	800483e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d90a      	bls.n	8003330 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2282      	movs	r2, #130	@ 0x82
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003326:	4618      	mov	r0, r3
 8003328:	f001 faf9 	bl	800491e <SDMMC_CmdReadMultiBlock>
 800332c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800332e:	e009      	b.n	8003344 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2281      	movs	r2, #129	@ 0x81
 8003334:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800333c:	4618      	mov	r0, r3
 800333e:	f001 facc 	bl	80048da <SDMMC_CmdReadSingleBlock>
 8003342:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a0e      	ldr	r2, [pc, #56]	@ (8003388 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e002      	b.n	8003376 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3730      	adds	r7, #48	@ 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	08003dbb 	.word	0x08003dbb
 8003384:	08003e2d 	.word	0x08003e2d
 8003388:	004005ff 	.word	0x004005ff
 800338c:	4225858c 	.word	0x4225858c

08003390 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	@ 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0c5      	b.n	8003544 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 80be 	bne.w	8003542 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d907      	bls.n	80033ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0ac      	b.n	8003544 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2203      	movs	r2, #3
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	4a4e      	ldr	r2, [pc, #312]	@ (800354c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341a:	4a4d      	ldr	r2, [pc, #308]	@ (8003550 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800341c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003422:	2200      	movs	r2, #0
 8003424:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	025b      	lsls	r3, r3, #9
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d90a      	bls.n	8003450 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22a0      	movs	r2, #160	@ 0xa0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003446:	4618      	mov	r0, r3
 8003448:	f001 faad 	bl	80049a6 <SDMMC_CmdWriteMultiBlock>
 800344c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800344e:	e009      	b.n	8003464 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2290      	movs	r2, #144	@ 0x90
 8003454:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fa80 	bl	8004962 <SDMMC_CmdWriteSingleBlock>
 8003462:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a39      	ldr	r2, [pc, #228]	@ (8003554 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e059      	b.n	8003544 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003490:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	2240      	movs	r2, #64	@ 0x40
 800349c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3380      	adds	r3, #128	@ 0x80
 80034c6:	461a      	mov	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f7fd ffa7 	bl	8001420 <HAL_DMA_Start_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01c      	beq.n	8003512 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80034e6:	f023 0302 	bic.w	r3, r3, #2
 80034ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e018      	b.n	8003544 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003516:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800351e:	2390      	movs	r3, #144	@ 0x90
 8003520:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f107 0210 	add.w	r2, r7, #16
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f980 	bl	800483e <SDIO_ConfigData>

      return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3730      	adds	r7, #48	@ 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	08003d91 	.word	0x08003d91
 8003550:	08003e2d 	.word	0x08003e2d
 8003554:	004005ff 	.word	0x004005ff
 8003558:	4225858c 	.word	0x4225858c

0800355c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_SD_IRQHandler+0x2e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 f806 	bl	8004594 <SD_Read_IT>
 8003588:	e165      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 808f 	beq.w	80036b8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035a2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80035b2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80035b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d039      	beq.n	8003646 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_SD_IRQHandler+0x8a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 f9fe 	bl	80049ec <SDMMC_CmdStopTransfer>
 80035f0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f92f 	bl	8003868 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_SD_IRQHandler+0xda>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 fe6c 	bl	8005314 <HAL_SD_RxCpltCallback>
 800363c:	e10b      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f001 fe5e 	bl	8005300 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003644:	e107      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8102 	beq.w	8003856 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d011      	beq.n	8003680 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f9c3 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003666:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8f4 	bl	8003868 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80e5 	bne.w	8003856 <HAL_SD_IRQHandler+0x2fa>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80df 	bne.w	8003856 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0208 	bic.w	r2, r2, #8
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f001 fe25 	bl	8005300 <HAL_SD_TxCpltCallback>
}
 80036b6:	e0ce      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_SD_IRQHandler+0x17c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 ffb0 	bl	8004636 <SD_Write_IT>
 80036d6:	e0be      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036de:	f240 233a 	movw	r3, #570	@ 0x23a
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b6 	beq.w	8003856 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	f043 0202 	orr.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	f043 0208 	orr.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	f043 0208 	orr.w	r2, r3, #8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f92c 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003794:	4602      	mov	r2, r0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f855 	bl	8003868 <HAL_SD_ErrorCallback>
}
 80037be:	e04a      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d045      	beq.n	8003856 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_SD_IRQHandler+0x282>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_SD_IRQHandler+0x304>)
 80037e4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fe70 	bl	80014d0 <HAL_DMA_Abort_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02f      	beq.n	8003856 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fb68 	bl	8003ed0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003800:	e029      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <HAL_SD_IRQHandler+0x2ba>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <HAL_SD_IRQHandler+0x308>)
 800381c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fe54 	bl	80014d0 <HAL_DMA_Abort_IT>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d013      	beq.n	8003856 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb83 	bl	8003f3e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003838:	e00d      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f001 fd4c 	bl	80052ec <HAL_SD_AbortCallback>
}
 8003854:	e7ff      	b.n	8003856 <HAL_SD_IRQHandler+0x2fa>
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08003ed1 	.word	0x08003ed1
 8003864:	08003f3f 	.word	0x08003f3f

08003868 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388a:	0f9b      	lsrs	r3, r3, #30
 800388c:	b2da      	uxtb	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003896:	0e9b      	lsrs	r3, r3, #26
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038dc:	0d1b      	lsrs	r3, r3, #20
 80038de:	b29a      	uxth	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038fa:	0bdb      	lsrs	r3, r3, #15
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390c:	0b9b      	lsrs	r3, r3, #14
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003930:	0b1b      	lsrs	r3, r3, #12
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d163      	bne.n	8003a14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800395c:	0f92      	lsrs	r2, r2, #30
 800395e:	431a      	orrs	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003968:	0edb      	lsrs	r3, r3, #27
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	b2da      	uxtb	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397a:	0e1b      	lsrs	r3, r3, #24
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398c:	0d5b      	lsrs	r3, r3, #21
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	b2da      	uxtb	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800399e:	0c9b      	lsrs	r3, r3, #18
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b0:	0bdb      	lsrs	r3, r3, #15
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	7e1b      	ldrb	r3, [r3, #24]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	3302      	adds	r3, #2
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039de:	fb03 f202 	mul.w	r2, r3, r2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7a1b      	ldrb	r3, [r3, #8]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2201      	movs	r2, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a00:	0a52      	lsrs	r2, r2, #9
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a12:	e031      	b.n	8003a78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d11d      	bne.n	8003a58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	3301      	adds	r3, #1
 8003a38:	029a      	lsls	r2, r3, #10
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a56:	e00f      	b.n	8003a78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <HAL_SD_GetCardCSD+0x344>)
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e09d      	b.n	8003bb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7c:	0b9b      	lsrs	r3, r3, #14
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8e:	09db      	lsrs	r3, r3, #7
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab0:	0fdb      	lsrs	r3, r3, #31
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	0f5b      	lsrs	r3, r3, #29
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	0d9b      	lsrs	r3, r3, #22
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	0d5b      	lsrs	r3, r3, #21
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	0bdb      	lsrs	r3, r3, #15
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	0b9b      	lsrs	r3, r3, #14
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	0b1b      	lsrs	r3, r3, #12
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	004005ff 	.word	0x004005ff

08003bc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c1c:	b5b0      	push	{r4, r5, r7, lr}
 8003c1e:	b08e      	sub	sp, #56	@ 0x38
 8003c20:	af04      	add	r7, sp, #16
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d02e      	beq.n	8003c9a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d106      	bne.n	8003c52 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c50:	e029      	b.n	8003ca6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c58:	d10a      	bne.n	8003c70 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fb2a 	bl	80042b4 <SD_WideBus_Enable>
 8003c60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c6e:	e01a      	b.n	8003ca6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb67 	bl	800434a <SD_WideBus_Disable>
 8003c7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c8a:	e00c      	b.n	8003ca6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c98:	e005      	b.n	8003ca6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003cc4:	e01f      	b.n	8003d06 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681d      	ldr	r5, [r3, #0]
 8003cec:	466c      	mov	r4, sp
 8003cee:	f107 0314 	add.w	r3, r7, #20
 8003cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 fced 	bl	80046e0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fdc1 	bl	8004896 <SDMMC_CmdBlockLength>
 8003d14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3728      	adds	r7, #40	@ 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	004005ff 	.word	0x004005ff

08003d50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d5c:	f107 030c 	add.w	r3, r7, #12
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa7e 	bl	8004264 <SD_SendStatus>
 8003d68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d86:	693b      	ldr	r3, [r7, #16]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	2b82      	cmp	r3, #130	@ 0x82
 8003dce:	d111      	bne.n	8003df4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fe09 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003dda:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fd3a 	bl	8003868 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0208 	bic.w	r2, r2, #8
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f001 fa79 	bl	8005314 <HAL_SD_RxCpltCallback>
#endif
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fcf4 	bl	8001828 <HAL_DMA_GetError>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d03e      	beq.n	8003ec4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d002      	beq.n	8003e62 <SD_DMAError+0x36>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d12d      	bne.n	8003ebe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a19      	ldr	r2, [pc, #100]	@ (8003ecc <SD_DMAError+0xa0>)
 8003e68:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003e78:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff62 	bl	8003d50 <HAL_SD_GetCardState>
 8003e8c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d002      	beq.n	8003e9a <SD_DMAError+0x6e>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d10a      	bne.n	8003eb0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fda4 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff fcd2 	bl	8003868 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	004005ff 	.word	0x004005ff

08003ed0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ff31 	bl	8003d50 <HAL_SD_GetCardState>
 8003eee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d002      	beq.n	8003f0a <SD_DMATxAbort+0x3a>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10a      	bne.n	8003f20 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd6c 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f001 f9df 	bl	80052ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f2e:	e002      	b.n	8003f36 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fc99 	bl	8003868 <HAL_SD_ErrorCallback>
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fefa 	bl	8003d50 <HAL_SD_GetCardState>
 8003f5c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d002      	beq.n	8003f78 <SD_DMARxAbort+0x3a>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d10a      	bne.n	8003f8e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd35 	bl	80049ec <SDMMC_CmdStopTransfer>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f001 f9a8 	bl	80052ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f9c:	e002      	b.n	8003fa4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fc62 	bl	8003868 <HAL_SD_ErrorCallback>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b094      	sub	sp, #80	@ 0x50
 8003fb0:	af04      	add	r7, sp, #16
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fbe6 	bl	800478e <SDIO_GetPowerState>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fc8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003fcc:	e0b8      	b.n	8004140 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d02f      	beq.n	8004036 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fe10 	bl	8004c00 <SDMMC_CmdSendCID>
 8003fe0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <SD_InitCard+0x40>
    {
      return errorstate;
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fea:	e0a9      	b.n	8004140 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fc10 	bl	8004818 <SDIO_GetResponse>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2104      	movs	r1, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fc07 	bl	8004818 <SDIO_GetResponse>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2108      	movs	r1, #8
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fbfe 	bl	8004818 <SDIO_GetResponse>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	210c      	movs	r1, #12
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fbf5 	bl	8004818 <SDIO_GetResponse>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	2b03      	cmp	r3, #3
 800403c:	d00d      	beq.n	800405a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f107 020e 	add.w	r2, r7, #14
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe16 	bl	8004c7a <SDMMC_CmdSetRelAdd>
 800404e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <SD_InitCard+0xae>
    {
      return errorstate;
 8004056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004058:	e072      	b.n	8004140 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	2b03      	cmp	r3, #3
 8004060:	d036      	beq.n	80040d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004062:	89fb      	ldrh	r3, [r7, #14]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fde0 	bl	8004c3c <SDMMC_CmdSendCSD>
 800407c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004086:	e05b      	b.n	8004140 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fbc2 	bl	8004818 <SDIO_GetResponse>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2104      	movs	r1, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fbb9 	bl	8004818 <SDIO_GetResponse>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2108      	movs	r1, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fbb0 	bl	8004818 <SDIO_GetResponse>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	210c      	movs	r1, #12
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fba7 	bl	8004818 <SDIO_GetResponse>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2104      	movs	r1, #4
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb9e 	bl	8004818 <SDIO_GetResponse>
 80040dc:	4603      	mov	r3, r0
 80040de:	0d1a      	lsrs	r2, r3, #20
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80040e4:	f107 0310 	add.w	r3, r7, #16
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fbc6 	bl	800387c <HAL_SD_GetCardCSD>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80040fa:	e021      	b.n	8004140 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	2200      	movs	r2, #0
 8004108:	461c      	mov	r4, r3
 800410a:	4615      	mov	r5, r2
 800410c:	4622      	mov	r2, r4
 800410e:	462b      	mov	r3, r5
 8004110:	4608      	mov	r0, r1
 8004112:	f000 fc8d 	bl	8004a30 <SDMMC_CmdSelDesel>
 8004116:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <SD_InitCard+0x176>
  {
    return errorstate;
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	e00e      	b.n	8004140 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	466c      	mov	r4, sp
 800412a:	f103 0210 	add.w	r2, r3, #16
 800412e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004134:	3304      	adds	r3, #4
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	4628      	mov	r0, r5
 800413a:	f000 fad1 	bl	80046e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3740      	adds	r7, #64	@ 0x40
 8004144:	46bd      	mov	sp, r7
 8004146:	bdb0      	pop	{r4, r5, r7, pc}

08004148 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc88 	bl	8004a76 <SDMMC_CmdGoIdleState>
 8004166:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <SD_PowerON+0x2a>
  {
    return errorstate;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	e072      	b.n	8004258 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc9b 	bl	8004ab2 <SDMMC_CmdOperCond>
 800417c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc71 	bl	8004a76 <SDMMC_CmdGoIdleState>
 8004194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	e05b      	b.n	8004258 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d137      	bne.n	800421e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fc9b 	bl	8004af0 <SDMMC_CmdAppCommand>
 80041ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d02d      	beq.n	800421e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80041c6:	e047      	b.n	8004258 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc8e 	bl	8004af0 <SDMMC_CmdAppCommand>
 80041d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	e03b      	b.n	8004258 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	491e      	ldr	r1, [pc, #120]	@ (8004260 <SD_PowerON+0x118>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fca4 	bl	8004b34 <SDMMC_CmdAppOperCommand>
 80041ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80041f8:	e02e      	b.n	8004258 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fb09 	bl	8004818 <SDIO_GetResponse>
 8004206:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	0fdb      	lsrs	r3, r3, #31
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <SD_PowerON+0xcc>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <SD_PowerON+0xce>
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]

    count++;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004224:	4293      	cmp	r3, r2
 8004226:	d802      	bhi.n	800422e <SD_PowerON+0xe6>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0cc      	beq.n	80041c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004234:	4293      	cmp	r3, r2
 8004236:	d902      	bls.n	800423e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800423c:	e00c      	b.n	8004258 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
 800424e:	e002      	b.n	8004256 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	c1100000 	.word	0xc1100000

08004264 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004274:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004278:	e018      	b.n	80042ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fd18 	bl	8004cbc <SDMMC_CmdSendStatus>
 800428c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e009      	b.n	80042ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 faba 	bl	8004818 <SDIO_GetResponse>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 faa4 	bl	8004818 <SDIO_GetResponse>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042da:	d102      	bne.n	80042e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042e0:	e02f      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f879 	bl	80043e0 <SD_FindSCR>
 80042ee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	e023      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01c      	beq.n	800433e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fbed 	bl	8004af0 <SDMMC_CmdAppCommand>
 8004316:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e00f      	b.n	8004342 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2102      	movs	r1, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fc26 	bl	8004b7a <SDMMC_CmdBusWidth>
 800432e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e003      	b.n	8004342 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800433a:	2300      	movs	r3, #0
 800433c:	e001      	b.n	8004342 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800433e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fa59 	bl	8004818 <SDIO_GetResponse>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004370:	d102      	bne.n	8004378 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004372:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004376:	e02f      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f82e 	bl	80043e0 <SD_FindSCR>
 8004384:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e023      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01c      	beq.n	80043d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fba2 	bl	8004af0 <SDMMC_CmdAppCommand>
 80043ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	e00f      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fbdb 	bl	8004b7a <SDMMC_CmdBusWidth>
 80043c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	e003      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e001      	b.n	80043d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b08f      	sub	sp, #60	@ 0x3c
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80043ea:	f7fc fe29 	bl	8001040 <HAL_GetTick>
 80043ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2108      	movs	r1, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fa45 	bl	8004896 <SDMMC_CmdBlockLength>
 800440c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004416:	e0b9      	b.n	800458c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 fb63 	bl	8004af0 <SDMMC_CmdAppCommand>
 800442a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	e0aa      	b.n	800458c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800443a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800443c:	2308      	movs	r3, #8
 800443e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004440:	2330      	movs	r3, #48	@ 0x30
 8004442:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004444:	2302      	movs	r3, #2
 8004446:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f107 0210 	add.w	r2, r7, #16
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f9ef 	bl	800483e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fbaa 	bl	8004bbe <SDMMC_CmdSendSCR>
 800446a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02a      	beq.n	80044c8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	e08a      	b.n	800458c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f107 0208 	add.w	r2, r7, #8
 8004490:	18d4      	adds	r4, r2, r3
 8004492:	4608      	mov	r0, r1
 8004494:	f000 f94f 	bl	8004736 <SDIO_ReadFIFO>
 8004498:	4603      	mov	r3, r0
 800449a:	6023      	str	r3, [r4, #0]
      index++;
 800449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449e:	3301      	adds	r3, #1
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a2:	e006      	b.n	80044b2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80044b2:	f7fc fdc5 	bl	8001040 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044c0:	d102      	bne.n	80044c8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80044c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044c6:	e061      	b.n	800458c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0cf      	beq.n	8004476 <SD_FindSCR+0x96>
 80044d6:	e000      	b.n	80044da <SD_FindSCR+0xfa>
      break;
 80044d8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <SD_FindSCR+0x116>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80044fe:	2308      	movs	r3, #8
 8004500:	e044      	b.n	800458c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2202      	movs	r2, #2
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004518:	2302      	movs	r3, #2
 800451a:	e037      	b.n	800458c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2220      	movs	r2, #32
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004532:	2320      	movs	r3, #32
 8004534:	e02a      	b.n	800458c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	061a      	lsls	r2, r3, #24
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800454c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004556:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	0e1b      	lsrs	r3, r3, #24
 800455c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	601a      	str	r2, [r3, #0]
    scr++;
 8004562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004564:	3304      	adds	r3, #4
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	061a      	lsls	r2, r3, #24
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004574:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800457e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0e1b      	lsrs	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	373c      	adds	r7, #60	@ 0x3c
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}

08004594 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d03f      	beq.n	800462e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e033      	b.n	800461c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f8bc 	bl	8004736 <SDIO_ReadFIFO>
 80045be:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0e1b      	lsrs	r3, r3, #24
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	701a      	strb	r2, [r3, #0]
      tmp++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3b01      	subs	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3301      	adds	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b07      	cmp	r3, #7
 8004620:	d9c8      	bls.n	80045b4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d043      	beq.n	80046d8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e037      	b.n	80046c6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3b01      	subs	r3, #1
 8004666:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3b01      	subs	r3, #1
 800467e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	041a      	lsls	r2, r3, #16
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	3b01      	subs	r3, #1
 8004696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	061a      	lsls	r2, r3, #24
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f107 0208 	add.w	r2, r7, #8
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f848 	bl	8004750 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	d9c4      	bls.n	8004656 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80046e0:	b084      	sub	sp, #16
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	f107 001c 	add.w	r0, r7, #28
 80046ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80046f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80046f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80046fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80046fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004702:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004706:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800470a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800471a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	b004      	add	sp, #16
 8004734:	4770      	bx	lr

08004736 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2203      	movs	r2, #3
 800477e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0303 	and.w	r3, r3, #3
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047c8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80047ce:	431a      	orrs	r2, r3
                       Command->CPSM);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80047d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	b2db      	uxtb	r3, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3314      	adds	r3, #20
 8004826:	461a      	mov	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4413      	add	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
}  
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004864:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800486a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004870:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004888:	2300      	movs	r3, #0

}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048a4:	2310      	movs	r3, #16
 80048a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a8:	2340      	movs	r3, #64	@ 0x40
 80048aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff74 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	2110      	movs	r1, #16
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa19 	bl	8004d00 <SDMMC_GetCmdResp1>
 80048ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048d0:	69fb      	ldr	r3, [r7, #28]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b088      	sub	sp, #32
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048e8:	2311      	movs	r3, #17
 80048ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ec:	2340      	movs	r3, #64	@ 0x40
 80048ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff52 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	2111      	movs	r1, #17
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9f7 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004914:	69fb      	ldr	r3, [r7, #28]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800492c:	2312      	movs	r3, #18
 800492e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004930:	2340      	movs	r3, #64	@ 0x40
 8004932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800493c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff30 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800494a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494e:	2112      	movs	r1, #18
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9d5 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004958:	69fb      	ldr	r3, [r7, #28]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004970:	2318      	movs	r3, #24
 8004972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004974:	2340      	movs	r3, #64	@ 0x40
 8004976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800497c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff0e 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	2118      	movs	r1, #24
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9b3 	bl	8004d00 <SDMMC_GetCmdResp1>
 800499a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049b4:	2319      	movs	r3, #25
 80049b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049b8:	2340      	movs	r3, #64	@ 0x40
 80049ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff feec 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	2119      	movs	r1, #25
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f991 	bl	8004d00 <SDMMC_GetCmdResp1>
 80049de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049e0:	69fb      	ldr	r3, [r7, #28]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80049f8:	230c      	movs	r3, #12
 80049fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049fc:	2340      	movs	r3, #64	@ 0x40
 80049fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff feca 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004a16:	4a05      	ldr	r2, [pc, #20]	@ (8004a2c <SDMMC_CmdStopTransfer+0x40>)
 8004a18:	210c      	movs	r1, #12
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f970 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a22:	69fb      	ldr	r3, [r7, #28]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	05f5e100 	.word	0x05f5e100

08004a30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a40:	2307      	movs	r3, #7
 8004a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a44:	2340      	movs	r3, #64	@ 0x40
 8004a46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a52:	f107 0310 	add.w	r3, r7, #16
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fea6 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	2107      	movs	r1, #7
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f94b 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3728      	adds	r7, #40	@ 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fe85 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fb65 	bl	8005170 <SDMMC_GetCmdError>
 8004aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004aba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ac4:	2340      	movs	r3, #64	@ 0x40
 8004ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fe66 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 faf8 	bl	80050d4 <SDMMC_GetCmdResp7>
 8004ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004afe:	2337      	movs	r3, #55	@ 0x37
 8004b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b02:	2340      	movs	r3, #64	@ 0x40
 8004b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fe47 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	2137      	movs	r1, #55	@ 0x37
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f8ec 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b4a:	2329      	movs	r3, #41	@ 0x29
 8004b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b4e:	2340      	movs	r3, #64	@ 0x40
 8004b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe21 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9ff 	bl	8004f6c <SDMMC_GetCmdResp3>
 8004b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b70:	69fb      	ldr	r3, [r7, #28]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b088      	sub	sp, #32
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004b88:	2306      	movs	r3, #6
 8004b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b8c:	2340      	movs	r3, #64	@ 0x40
 8004b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fe02 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	2106      	movs	r1, #6
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8a7 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b088      	sub	sp, #32
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004bca:	2333      	movs	r3, #51	@ 0x33
 8004bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bce:	2340      	movs	r3, #64	@ 0x40
 8004bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bdc:	f107 0308 	add.w	r3, r7, #8
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fde1 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bec:	2133      	movs	r1, #51	@ 0x33
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f886 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c10:	23c0      	movs	r3, #192	@ 0xc0
 8004c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fdc0 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f956 	bl	8004edc <SDMMC_GetCmdResp2>
 8004c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c32:	69fb      	ldr	r3, [r7, #28]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c4a:	2309      	movs	r3, #9
 8004c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c4e:	23c0      	movs	r3, #192	@ 0xc0
 8004c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fda1 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f937 	bl	8004edc <SDMMC_GetCmdResp2>
 8004c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c70:	69fb      	ldr	r3, [r7, #28]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b088      	sub	sp, #32
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c8c:	2340      	movs	r3, #64	@ 0x40
 8004c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fd82 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	2103      	movs	r1, #3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f99c 	bl	8004fe8 <SDMMC_GetCmdResp6>
 8004cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004cca:	230d      	movs	r3, #13
 8004ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cce:	2340      	movs	r3, #64	@ 0x40
 8004cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cdc:	f107 0308 	add.w	r3, r7, #8
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fd61 	bl	80047aa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cec:	210d      	movs	r1, #13
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f806 	bl	8004d00 <SDMMC_GetCmdResp1>
 8004cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d0e:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <SDMMC_GetCmdResp1+0x1d0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a70      	ldr	r2, [pc, #448]	@ (8004ed4 <SDMMC_GetCmdResp1+0x1d4>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	0a5a      	lsrs	r2, r3, #9
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	61fa      	str	r2, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d30:	e0c9      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ef      	beq.n	8004d22 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ea      	bne.n	8004d22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d5e:	2304      	movs	r3, #4
 8004d60:	e0b1      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0a6      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22c5      	movs	r2, #197	@ 0xc5
 8004d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fd3d 	bl	80047fe <SDIO_GetCommandResponse>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d001      	beq.n	8004d92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e099      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d92:	2100      	movs	r1, #0
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fd3f 	bl	8004818 <SDIO_GetResponse>
 8004d9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed8 <SDMMC_GetCmdResp1+0x1d8>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e08d      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da02      	bge.n	8004db6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004db0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db4:	e087      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004dc0:	2340      	movs	r3, #64	@ 0x40
 8004dc2:	e080      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004dce:	2380      	movs	r3, #128	@ 0x80
 8004dd0:	e079      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004de0:	e071      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004df0:	e069      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e00:	e061      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e10:	e059      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e20:	e051      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e30:	e049      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e40:	e041      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e50:	e039      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e60:	e031      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e70:	e029      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e80:	e021      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e90:	e019      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ea0:	e011      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004eac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eb0:	e009      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004ebc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004ec0:	e001      	b.n	8004ec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	10624dd3 	.word	0x10624dd3
 8004ed8:	fdffe008 	.word	0xfdffe008

08004edc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <SDMMC_GetCmdResp2+0x88>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <SDMMC_GetCmdResp2+0x8c>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a5b      	lsrs	r3, r3, #9
 8004ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	60fa      	str	r2, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f08:	e026      	b.n	8004f58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ef      	beq.n	8004efa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ea      	bne.n	8004efa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2204      	movs	r2, #4
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f36:	2304      	movs	r3, #4
 8004f38:	e00e      	b.n	8004f58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e003      	b.n	8004f58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	22c5      	movs	r2, #197	@ 0xc5
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <SDMMC_GetCmdResp3+0x74>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe4 <SDMMC_GetCmdResp3+0x78>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0a5b      	lsrs	r3, r3, #9
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	60fa      	str	r2, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f98:	e01b      	b.n	8004fd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0ef      	beq.n	8004f8a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e003      	b.n	8004fd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	22c5      	movs	r2, #197	@ 0xc5
 8004fce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000000 	.word	0x20000000
 8004fe4:	10624dd3 	.word	0x10624dd3

08004fe8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <SDMMC_GetCmdResp6+0xe4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a35      	ldr	r2, [pc, #212]	@ (80050d0 <SDMMC_GetCmdResp6+0xe8>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	0a5b      	lsrs	r3, r3, #9
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005016:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800501a:	e052      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005020:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ea      	bne.n	800500c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2204      	movs	r2, #4
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005048:	2304      	movs	r3, #4
 800504a:	e03a      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800505e:	2301      	movs	r3, #1
 8005060:	e02f      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fbcb 	bl	80047fe <SDIO_GetCommandResponse>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	4293      	cmp	r3, r2
 8005070:	d001      	beq.n	8005076 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005072:	2301      	movs	r3, #1
 8005074:	e025      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22c5      	movs	r2, #197	@ 0xc5
 800507a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800507c:	2100      	movs	r1, #0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fbca 	bl	8004818 <SDIO_GetResponse>
 8005084:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
 800509c:	e011      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050ac:	e009      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050bc:	e001      	b.n	80050c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000000 	.word	0x20000000
 80050d0:	10624dd3 	.word	0x10624dd3

080050d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050dc:	4b22      	ldr	r3, [pc, #136]	@ (8005168 <SDMMC_GetCmdResp7+0x94>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a22      	ldr	r2, [pc, #136]	@ (800516c <SDMMC_GetCmdResp7+0x98>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0a5b      	lsrs	r3, r3, #9
 80050e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005100:	e02c      	b.n	800515c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ea      	bne.n	80050f2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2204      	movs	r2, #4
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800512e:	2304      	movs	r3, #4
 8005130:	e014      	b.n	800515c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005144:	2301      	movs	r3, #1
 8005146:	e009      	b.n	800515c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800515a:	2300      	movs	r3, #0
  
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	20000000 	.word	0x20000000
 800516c:	10624dd3 	.word	0x10624dd3

08005170 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <SDMMC_GetCmdError+0x50>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <SDMMC_GetCmdError+0x54>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	0a5b      	lsrs	r3, r3, #9
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	60fa      	str	r2, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005198:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800519c:	e009      	b.n	80051b2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f1      	beq.n	800518e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	22c5      	movs	r2, #197	@ 0xc5
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000000 	.word	0x20000000
 80051c4:	10624dd3 	.word	0x10624dd3

080051c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80051cc:	4904      	ldr	r1, [pc, #16]	@ (80051e0 <MX_FATFS_Init+0x18>)
 80051ce:	4805      	ldr	r0, [pc, #20]	@ (80051e4 <MX_FATFS_Init+0x1c>)
 80051d0:	f003 fa94 	bl	80086fc <FATFS_LinkDriver>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <MX_FATFS_Init+0x20>)
 80051da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200001b4 	.word	0x200001b4
 80051e4:	08008988 	.word	0x08008988
 80051e8:	200001b0 	.word	0x200001b0

080051ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80051f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005206:	f000 f896 	bl	8005336 <BSP_SD_IsDetected>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e012      	b.n	800523a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005214:	480b      	ldr	r0, [pc, #44]	@ (8005244 <BSP_SD_Init+0x48>)
 8005216:	f7fd ff29 	bl	800306c <HAL_SD_Init>
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005224:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005228:	4806      	ldr	r0, [pc, #24]	@ (8005244 <BSP_SD_Init+0x48>)
 800522a:	f7fe fcf7 	bl	8003c1c <HAL_SD_ConfigWideBusOperation>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005238:	79fb      	ldrb	r3, [r7, #7]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000048 	.word	0x20000048

08005248 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	68f9      	ldr	r1, [r7, #12]
 800525e:	4806      	ldr	r0, [pc, #24]	@ (8005278 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005260:	f7fd ffb4 	bl	80031cc <HAL_SD_ReadBlocks_DMA>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000048 	.word	0x20000048

0800527c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	4806      	ldr	r0, [pc, #24]	@ (80052ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8005294:	f7fe f87c 	bl	8003390 <HAL_SD_WriteBlocks_DMA>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000048 	.word	0x20000048

080052b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80052b4:	4805      	ldr	r0, [pc, #20]	@ (80052cc <BSP_SD_GetCardState+0x1c>)
 80052b6:	f7fe fd4b 	bl	8003d50 <HAL_SD_GetCardState>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b04      	cmp	r3, #4
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000048 	.word	0x20000048

080052d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4803      	ldr	r0, [pc, #12]	@ (80052e8 <BSP_SD_GetCardInfo+0x18>)
 80052dc:	f7fe fc72 	bl	8003bc4 <HAL_SD_GetCardInfo>
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000048 	.word	0x20000048

080052ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80052f4:	f000 f818 	bl	8005328 <BSP_SD_AbortCallback>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005308:	f000 f9a8 	bl	800565c <BSP_SD_WriteCpltCallback>
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800531c:	f000 f9aa 	bl	8005674 <BSP_SD_ReadCpltCallback>
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0

}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800533c:	2301      	movs	r3, #1
 800533e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005340:	f000 f80c 	bl	800535c <BSP_PlatformIsDetected>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800534a:	2300      	movs	r3, #0
 800534c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	b2db      	uxtb	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005362:	2301      	movs	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800536a:	4806      	ldr	r0, [pc, #24]	@ (8005384 <BSP_PlatformIsDetected+0x28>)
 800536c:	f7fc ffb4 	bl	80022d8 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005376:	2300      	movs	r3, #0
 8005378:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800537a:	79fb      	ldrb	r3, [r7, #7]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40020000 	.word	0x40020000

08005388 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005390:	f7fb fe56 	bl	8001040 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005396:	e006      	b.n	80053a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005398:	f7ff ff8a 	bl	80052b0 <BSP_SD_GetCardState>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e009      	b.n	80053ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80053a6:	f7fb fe4b 	bl	8001040 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d8f0      	bhi.n	8005398 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <SD_CheckStatus+0x38>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80053d4:	f7ff ff6c 	bl	80052b0 <BSP_SD_GetCardState>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80053de:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <SD_CheckStatus+0x38>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <SD_CheckStatus+0x38>)
 80053ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80053ee:	4b03      	ldr	r3, [pc, #12]	@ (80053fc <SD_CheckStatus+0x38>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	b2db      	uxtb	r3, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000009 	.word	0x20000009

08005400 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800540a:	f7ff fef7 	bl	80051fc <BSP_SD_Init>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ffd4 	bl	80053c4 <SD_CheckStatus>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <SD_initialize+0x34>)
 8005422:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <SD_initialize+0x34>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000009 	.word	0x20000009

08005438 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff ffbd 	bl	80053c4 <SD_CheckStatus>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005468:	f247 5030 	movw	r0, #30000	@ 0x7530
 800546c:	f7ff ff8c 	bl	8005388 <SD_CheckStatusWithTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	da01      	bge.n	800547a <SD_read+0x26>
  {
    return res;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	e03b      	b.n	80054f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	68b8      	ldr	r0, [r7, #8]
 8005480:	f7ff fee2 	bl	8005248 <BSP_SD_ReadBlocks_DMA>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d132      	bne.n	80054f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800548a:	4b1c      	ldr	r3, [pc, #112]	@ (80054fc <SD_read+0xa8>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005490:	f7fb fdd6 	bl	8001040 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005496:	bf00      	nop
 8005498:	4b18      	ldr	r3, [pc, #96]	@ (80054fc <SD_read+0xa8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <SD_read+0x5e>
 80054a0:	f7fb fdce 	bl	8001040 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d9f2      	bls.n	8005498 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <SD_read+0xa8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	75fb      	strb	r3, [r7, #23]
 80054be:	e017      	b.n	80054f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80054c0:	4b0e      	ldr	r3, [pc, #56]	@ (80054fc <SD_read+0xa8>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80054c6:	f7fb fdbb 	bl	8001040 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80054cc:	e007      	b.n	80054de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80054ce:	f7ff feef 	bl	80052b0 <BSP_SD_GetCardState>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <SD_read+0x8a>
          {
            res = RES_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80054dc:	e008      	b.n	80054f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80054de:	f7fb fdaf 	bl	8001040 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d9ee      	bls.n	80054ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	200001bc 	.word	0x200001bc

08005500 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005514:	4b24      	ldr	r3, [pc, #144]	@ (80055a8 <SD_write+0xa8>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800551a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800551e:	f7ff ff33 	bl	8005388 <SD_CheckStatusWithTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	da01      	bge.n	800552c <SD_write+0x2c>
  {
    return res;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	e038      	b.n	800559e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f7ff fea3 	bl	800527c <BSP_SD_WriteBlocks_DMA>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d12f      	bne.n	800559c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800553c:	f7fb fd80 	bl	8001040 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005542:	bf00      	nop
 8005544:	4b18      	ldr	r3, [pc, #96]	@ (80055a8 <SD_write+0xa8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <SD_write+0x5e>
 800554c:	f7fb fd78 	bl	8001040 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f247 522f 	movw	r2, #29999	@ 0x752f
 800555a:	4293      	cmp	r3, r2
 800555c:	d9f2      	bls.n	8005544 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <SD_write+0xa8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	e017      	b.n	800559c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800556c:	4b0e      	ldr	r3, [pc, #56]	@ (80055a8 <SD_write+0xa8>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005572:	f7fb fd65 	bl	8001040 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005578:	e007      	b.n	800558a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800557a:	f7ff fe99 	bl	80052b0 <BSP_SD_GetCardState>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <SD_write+0x8a>
          {
            res = RES_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	75fb      	strb	r3, [r7, #23]
            break;
 8005588:	e008      	b.n	800559c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800558a:	f7fb fd59 	bl	8001040 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005598:	4293      	cmp	r3, r2
 800559a:	d9ee      	bls.n	800557a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200001b8 	.word	0x200001b8

080055ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	@ 0x30
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	603a      	str	r2, [r7, #0]
 80055b6:	71fb      	strb	r3, [r7, #7]
 80055b8:	460b      	mov	r3, r1
 80055ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80055c2:	4b25      	ldr	r3, [pc, #148]	@ (8005658 <SD_ioctl+0xac>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <SD_ioctl+0x28>
 80055d0:	2303      	movs	r3, #3
 80055d2:	e03c      	b.n	800564e <SD_ioctl+0xa2>

  switch (cmd)
 80055d4:	79bb      	ldrb	r3, [r7, #6]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d834      	bhi.n	8005644 <SD_ioctl+0x98>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <SD_ioctl+0x34>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	080055f9 	.word	0x080055f9
 80055e8:	08005611 	.word	0x08005611
 80055ec:	0800562b 	.word	0x0800562b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80055f6:	e028      	b.n	800564a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fe67 	bl	80052d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800560e:	e01c      	b.n	800564a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fe5b 	bl	80052d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	b29a      	uxth	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005628:	e00f      	b.n	800564a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fe4e 	bl	80052d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	0a5a      	lsrs	r2, r3, #9
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005642:	e002      	b.n	800564a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005644:	2304      	movs	r3, #4
 8005646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800564a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	@ 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000009 	.word	0x20000009

0800565c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <BSP_SD_WriteCpltCallback+0x14>)
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	200001b8 	.word	0x200001b8

08005674 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <BSP_SD_ReadCpltCallback+0x14>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	200001bc 	.word	0x200001bc

0800568c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4a08      	ldr	r2, [pc, #32]	@ (80056bc <disk_status+0x30>)
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	79fa      	ldrb	r2, [r7, #7]
 80056a4:	4905      	ldr	r1, [pc, #20]	@ (80056bc <disk_status+0x30>)
 80056a6:	440a      	add	r2, r1
 80056a8:	7a12      	ldrb	r2, [r2, #8]
 80056aa:	4610      	mov	r0, r2
 80056ac:	4798      	blx	r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200003e8 	.word	0x200003e8

080056c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	4a0e      	ldr	r2, [pc, #56]	@ (800570c <disk_initialize+0x4c>)
 80056d2:	5cd3      	ldrb	r3, [r2, r3]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d114      	bne.n	8005702 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	4a0c      	ldr	r2, [pc, #48]	@ (800570c <disk_initialize+0x4c>)
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	79fa      	ldrb	r2, [r7, #7]
 80056e6:	4909      	ldr	r1, [pc, #36]	@ (800570c <disk_initialize+0x4c>)
 80056e8:	440a      	add	r2, r1
 80056ea:	7a12      	ldrb	r2, [r2, #8]
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	4a03      	ldr	r2, [pc, #12]	@ (800570c <disk_initialize+0x4c>)
 80056fe:	2101      	movs	r1, #1
 8005700:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200003e8 	.word	0x200003e8

08005710 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	4a0a      	ldr	r2, [pc, #40]	@ (800574c <disk_read+0x3c>)
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	689c      	ldr	r4, [r3, #8]
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	4a07      	ldr	r2, [pc, #28]	@ (800574c <disk_read+0x3c>)
 8005730:	4413      	add	r3, r2
 8005732:	7a18      	ldrb	r0, [r3, #8]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	47a0      	blx	r4
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	bf00      	nop
 800574c:	200003e8 	.word	0x200003e8

08005750 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <disk_write+0x3c>)
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68dc      	ldr	r4, [r3, #12]
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	4a07      	ldr	r2, [pc, #28]	@ (800578c <disk_write+0x3c>)
 8005770:	4413      	add	r3, r2
 8005772:	7a18      	ldrb	r0, [r3, #8]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	47a0      	blx	r4
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	200003e8 	.word	0x200003e8

08005790 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	603a      	str	r2, [r7, #0]
 800579a:	71fb      	strb	r3, [r7, #7]
 800579c:	460b      	mov	r3, r1
 800579e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	4a09      	ldr	r2, [pc, #36]	@ (80057c8 <disk_ioctl+0x38>)
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	79fa      	ldrb	r2, [r7, #7]
 80057ae:	4906      	ldr	r1, [pc, #24]	@ (80057c8 <disk_ioctl+0x38>)
 80057b0:	440a      	add	r2, r1
 80057b2:	7a10      	ldrb	r0, [r2, #8]
 80057b4:	79b9      	ldrb	r1, [r7, #6]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	4798      	blx	r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200003e8 	.word	0x200003e8

080057cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	4313      	orrs	r3, r2
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80057ee:	89fb      	ldrh	r3, [r7, #14]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3303      	adds	r3, #3
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	3202      	adds	r2, #2
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	3201      	adds	r2, #1
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	7812      	ldrb	r2, [r2, #0]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
	return rv;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	1c53      	adds	r3, r2, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	6179      	str	r1, [r7, #20]
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f1      	bne.n	80058ea <mem_cpy+0x1a>
	}
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	617a      	str	r2, [r7, #20]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f3      	bne.n	8005922 <mem_set+0x10>
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	@ 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	61fa      	str	r2, [r7, #28]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	4619      	mov	r1, r3
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	61ba      	str	r2, [r7, #24]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3b01      	subs	r3, #1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <mem_cmp+0x40>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0eb      	beq.n	8005960 <mem_cmp+0x18>

	return r;
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3724      	adds	r7, #36	@ 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059a0:	e002      	b.n	80059a8 <chk_chr+0x12>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3301      	adds	r3, #1
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <chk_chr+0x26>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d1f2      	bne.n	80059a2 <chk_chr+0xc>
	return *str;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	781b      	ldrb	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e029      	b.n	8005a34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80059e0:	4a27      	ldr	r2, [pc, #156]	@ (8005a80 <chk_lock+0xb4>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01d      	beq.n	8005a2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059ee:	4a24      	ldr	r2, [pc, #144]	@ (8005a80 <chk_lock+0xb4>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	4413      	add	r3, r2
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d116      	bne.n	8005a2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a00:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <chk_lock+0xb4>)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	4413      	add	r3, r2
 8005a08:	3304      	adds	r3, #4
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d10c      	bne.n	8005a2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a14:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <chk_lock+0xb4>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d102      	bne.n	8005a2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a28:	e007      	b.n	8005a3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d9d2      	bls.n	80059e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d109      	bne.n	8005a54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <chk_lock+0x80>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d101      	bne.n	8005a50 <chk_lock+0x84>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e010      	b.n	8005a72 <chk_lock+0xa6>
 8005a50:	2312      	movs	r3, #18
 8005a52:	e00e      	b.n	8005a72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d108      	bne.n	8005a6c <chk_lock+0xa0>
 8005a5a:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <chk_lock+0xb4>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	4413      	add	r3, r2
 8005a62:	330c      	adds	r3, #12
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d101      	bne.n	8005a70 <chk_lock+0xa4>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	e000      	b.n	8005a72 <chk_lock+0xa6>
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	200001c8 	.word	0x200001c8

08005a84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e002      	b.n	8005a96 <enq_lock+0x12>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3301      	adds	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d806      	bhi.n	8005aaa <enq_lock+0x26>
 8005a9c:	4a09      	ldr	r2, [pc, #36]	@ (8005ac4 <enq_lock+0x40>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	4413      	add	r3, r2
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f2      	bne.n	8005a90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	200001c8 	.word	0x200001c8

08005ac8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e01f      	b.n	8005b18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ad8:	4a41      	ldr	r2, [pc, #260]	@ (8005be0 <inc_lock+0x118>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d113      	bne.n	8005b12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005aea:	4a3d      	ldr	r2, [pc, #244]	@ (8005be0 <inc_lock+0x118>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d109      	bne.n	8005b12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005afe:	4a38      	ldr	r2, [pc, #224]	@ (8005be0 <inc_lock+0x118>)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	4413      	add	r3, r2
 8005b06:	3308      	adds	r3, #8
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d006      	beq.n	8005b20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d9dc      	bls.n	8005ad8 <inc_lock+0x10>
 8005b1e:	e000      	b.n	8005b22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d132      	bne.n	8005b8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e002      	b.n	8005b34 <inc_lock+0x6c>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d806      	bhi.n	8005b48 <inc_lock+0x80>
 8005b3a:	4a29      	ldr	r2, [pc, #164]	@ (8005be0 <inc_lock+0x118>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f2      	bne.n	8005b2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d101      	bne.n	8005b52 <inc_lock+0x8a>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e040      	b.n	8005bd4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4922      	ldr	r1, [pc, #136]	@ (8005be0 <inc_lock+0x118>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	440b      	add	r3, r1
 8005b5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	491e      	ldr	r1, [pc, #120]	@ (8005be0 <inc_lock+0x118>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	491a      	ldr	r1, [pc, #104]	@ (8005be0 <inc_lock+0x118>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b80:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <inc_lock+0x118>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	4413      	add	r3, r2
 8005b88:	330c      	adds	r3, #12
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <inc_lock+0xe0>
 8005b94:	4a12      	ldr	r2, [pc, #72]	@ (8005be0 <inc_lock+0x118>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	4413      	add	r3, r2
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <inc_lock+0xe0>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e015      	b.n	8005bd4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <inc_lock+0xf8>
 8005bae:	4a0c      	ldr	r2, [pc, #48]	@ (8005be0 <inc_lock+0x118>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	e001      	b.n	8005bc4 <inc_lock+0xfc>
 8005bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bc4:	4906      	ldr	r1, [pc, #24]	@ (8005be0 <inc_lock+0x118>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	440b      	add	r3, r1
 8005bcc:	330c      	adds	r3, #12
 8005bce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	200001c8 	.word	0x200001c8

08005be4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d825      	bhi.n	8005c44 <dec_lock+0x60>
		n = Files[i].ctr;
 8005bf8:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <dec_lock+0x74>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	4413      	add	r3, r2
 8005c00:	330c      	adds	r3, #12
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c06:	89fb      	ldrh	r3, [r7, #14]
 8005c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0c:	d101      	bne.n	8005c12 <dec_lock+0x2e>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c12:	89fb      	ldrh	r3, [r7, #14]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <dec_lock+0x3a>
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c58 <dec_lock+0x74>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	4413      	add	r3, r2
 8005c26:	330c      	adds	r3, #12
 8005c28:	89fa      	ldrh	r2, [r7, #14]
 8005c2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <dec_lock+0x5a>
 8005c32:	4a09      	ldr	r2, [pc, #36]	@ (8005c58 <dec_lock+0x74>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	737b      	strb	r3, [r7, #13]
 8005c42:	e001      	b.n	8005c48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c44:	2302      	movs	r3, #2
 8005c46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c48:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	200001c8 	.word	0x200001c8

08005c5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e010      	b.n	8005c8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca0 <clear_lock+0x44>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	4413      	add	r3, r2
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d105      	bne.n	8005c86 <clear_lock+0x2a>
 8005c7a:	4a09      	ldr	r2, [pc, #36]	@ (8005ca0 <clear_lock+0x44>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	4413      	add	r3, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d9eb      	bls.n	8005c6a <clear_lock+0xe>
	}
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	200001c8 	.word	0x200001c8

08005ca4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	78db      	ldrb	r3, [r3, #3]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d034      	beq.n	8005d22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7858      	ldrb	r0, [r3, #1]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cc8:	2301      	movs	r3, #1
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	f7ff fd40 	bl	8005750 <disk_write>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	e022      	b.n	8005d22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	1ad2      	subs	r2, r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d217      	bcs.n	8005d22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	789b      	ldrb	r3, [r3, #2]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e010      	b.n	8005d1c <sync_window+0x78>
					wsect += fs->fsize;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7858      	ldrb	r0, [r3, #1]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d0e:	2301      	movs	r3, #1
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	f7ff fd1d 	bl	8005750 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d8eb      	bhi.n	8005cfa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d01b      	beq.n	8005d7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ffad 	bl	8005ca4 <sync_window>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d113      	bne.n	8005d7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7858      	ldrb	r0, [r3, #1]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d5e:	2301      	movs	r3, #1
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f7ff fcd5 	bl	8005710 <disk_read>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff87 	bl	8005ca4 <sync_window>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d159      	bne.n	8005e54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d149      	bne.n	8005e3c <sync_fs+0xb4>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d145      	bne.n	8005e3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	899b      	ldrh	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f7ff fda8 	bl	8005912 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3338      	adds	r3, #56	@ 0x38
 8005dc6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005dca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fd37 	bl	8005842 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3338      	adds	r3, #56	@ 0x38
 8005dd8:	4921      	ldr	r1, [pc, #132]	@ (8005e60 <sync_fs+0xd8>)
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fd4c 	bl	8005878 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3338      	adds	r3, #56	@ 0x38
 8005de4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005de8:	491e      	ldr	r1, [pc, #120]	@ (8005e64 <sync_fs+0xdc>)
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fd44 	bl	8005878 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3338      	adds	r3, #56	@ 0x38
 8005df4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7ff fd3a 	bl	8005878 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3338      	adds	r3, #56	@ 0x38
 8005e08:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7ff fd30 	bl	8005878 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7858      	ldrb	r0, [r3, #1]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e30:	2301      	movs	r3, #1
 8005e32:	f7ff fc8d 	bl	8005750 <disk_write>
			fs->fsi_flag = 0;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fca3 	bl	8005790 <disk_ioctl>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <sync_fs+0xcc>
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	41615252 	.word	0x41615252
 8005e64:	61417272 	.word	0x61417272

08005e68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3b02      	subs	r3, #2
 8005e76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	3b02      	subs	r3, #2
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d301      	bcc.n	8005e88 <clust2sect+0x20>
 8005e84:	2300      	movs	r3, #0
 8005e86:	e008      	b.n	8005e9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	895b      	ldrh	r3, [r3, #10]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	fb03 f202 	mul.w	r2, r3, r2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	4413      	add	r3, r2
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d904      	bls.n	8005ec6 <get_fat+0x20>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e0ba      	b.n	8006042 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ed0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f000 8082 	beq.w	8005fe0 <get_fat+0x13a>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	f300 80a6 	bgt.w	800602e <get_fat+0x188>
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d002      	beq.n	8005eec <get_fat+0x46>
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d055      	beq.n	8005f96 <get_fat+0xf0>
 8005eea:	e0a0      	b.n	800602e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	899b      	ldrh	r3, [r3, #12]
 8005f02:	4619      	mov	r1, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6938      	ldr	r0, [r7, #16]
 8005f10:	f7ff ff0c 	bl	8005d2c <move_window>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 808c 	bne.w	8006034 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	60fa      	str	r2, [r7, #12]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	8992      	ldrh	r2, [r2, #12]
 8005f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f2a:	fb01 f202 	mul.w	r2, r1, r2
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	899b      	ldrh	r3, [r3, #12]
 8005f42:	4619      	mov	r1, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6938      	ldr	r0, [r7, #16]
 8005f50:	f7ff feec 	bl	8005d2c <move_window>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d16e      	bne.n	8006038 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	899b      	ldrh	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f66:	fb01 f202 	mul.w	r2, r1, r2
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <get_fat+0xe6>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	e002      	b.n	8005f92 <get_fat+0xec>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f92:	617b      	str	r3, [r7, #20]
			break;
 8005f94:	e055      	b.n	8006042 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	899b      	ldrh	r3, [r3, #12]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005faa:	4413      	add	r3, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	6938      	ldr	r0, [r7, #16]
 8005fb0:	f7ff febc 	bl	8005d2c <move_window>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d140      	bne.n	800603c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	8992      	ldrh	r2, [r2, #12]
 8005fc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fcc:	fb00 f202 	mul.w	r2, r0, r2
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fbf9 	bl	80057cc <ld_word>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	617b      	str	r3, [r7, #20]
			break;
 8005fde:	e030      	b.n	8006042 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	899b      	ldrh	r3, [r3, #12]
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6938      	ldr	r0, [r7, #16]
 8005ffa:	f7ff fe97 	bl	8005d2c <move_window>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11d      	bne.n	8006040 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	8992      	ldrh	r2, [r2, #12]
 8006012:	fbb3 f0f2 	udiv	r0, r3, r2
 8006016:	fb00 f202 	mul.w	r2, r0, r2
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	440b      	add	r3, r1
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fbec 	bl	80057fc <ld_dword>
 8006024:	4603      	mov	r3, r0
 8006026:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800602a:	617b      	str	r3, [r7, #20]
			break;
 800602c:	e009      	b.n	8006042 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e006      	b.n	8006042 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006034:	bf00      	nop
 8006036:	e004      	b.n	8006042 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006040:	bf00      	nop
		}
	}

	return val;
 8006042:	697b      	ldr	r3, [r7, #20]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b089      	sub	sp, #36	@ 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006058:	2302      	movs	r3, #2
 800605a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b01      	cmp	r3, #1
 8006060:	f240 8109 	bls.w	8006276 <put_fat+0x22a>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	f080 8103 	bcs.w	8006276 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b03      	cmp	r3, #3
 8006076:	f000 80b6 	beq.w	80061e6 <put_fat+0x19a>
 800607a:	2b03      	cmp	r3, #3
 800607c:	f300 80fb 	bgt.w	8006276 <put_fat+0x22a>
 8006080:	2b01      	cmp	r3, #1
 8006082:	d003      	beq.n	800608c <put_fat+0x40>
 8006084:	2b02      	cmp	r3, #2
 8006086:	f000 8083 	beq.w	8006190 <put_fat+0x144>
 800608a:	e0f4      	b.n	8006276 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	899b      	ldrh	r3, [r3, #12]
 80060a2:	4619      	mov	r1, r3
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060aa:	4413      	add	r3, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fe3c 	bl	8005d2c <move_window>
 80060b4:	4603      	mov	r3, r0
 80060b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060b8:	7ffb      	ldrb	r3, [r7, #31]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 80d4 	bne.w	8006268 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	61ba      	str	r2, [r7, #24]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	8992      	ldrh	r2, [r2, #12]
 80060d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80060d4:	fb00 f202 	mul.w	r2, r0, r2
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	440b      	add	r3, r1
 80060dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <put_fat+0xb8>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	b25a      	sxtb	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	b2db      	uxtb	r3, r3
 8006102:	e001      	b.n	8006108 <put_fat+0xbc>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	899b      	ldrh	r3, [r3, #12]
 800611a:	4619      	mov	r1, r3
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006122:	4413      	add	r3, r2
 8006124:	4619      	mov	r1, r3
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fe00 	bl	8005d2c <move_window>
 800612c:	4603      	mov	r3, r0
 800612e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006130:	7ffb      	ldrb	r3, [r7, #31]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 809a 	bne.w	800626c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	899b      	ldrh	r3, [r3, #12]
 8006142:	461a      	mov	r2, r3
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	fbb3 f0f2 	udiv	r0, r3, r2
 800614a:	fb00 f202 	mul.w	r2, r0, r2
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	440b      	add	r3, r1
 8006152:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <put_fat+0x11a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	b2db      	uxtb	r3, r3
 8006164:	e00e      	b.n	8006184 <put_fat+0x138>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b25b      	sxtb	r3, r3
 800616c:	f023 030f 	bic.w	r3, r3, #15
 8006170:	b25a      	sxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	b25b      	sxtb	r3, r3
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	b25b      	sxtb	r3, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	b25b      	sxtb	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	70da      	strb	r2, [r3, #3]
			break;
 800618e:	e072      	b.n	8006276 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	899b      	ldrh	r3, [r3, #12]
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	b29b      	uxth	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a4:	4413      	add	r3, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fdbf 	bl	8005d2c <move_window>
 80061ae:	4603      	mov	r3, r0
 80061b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d15b      	bne.n	8006270 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	8992      	ldrh	r2, [r2, #12]
 80061c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80061ca:	fb00 f202 	mul.w	r2, r0, r2
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	440b      	add	r3, r1
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	b292      	uxth	r2, r2
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fb32 	bl	8005842 <st_word>
			fs->wflag = 1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	70da      	strb	r2, [r3, #3]
			break;
 80061e4:	e047      	b.n	8006276 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	899b      	ldrh	r3, [r3, #12]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80061fa:	4413      	add	r3, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff fd94 	bl	8005d2c <move_window>
 8006204:	4603      	mov	r3, r0
 8006206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006208:	7ffb      	ldrb	r3, [r7, #31]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d132      	bne.n	8006274 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	8992      	ldrh	r2, [r2, #12]
 8006222:	fbb3 f0f2 	udiv	r0, r3, r2
 8006226:	fb00 f202 	mul.w	r2, r0, r2
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	440b      	add	r3, r1
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fae4 	bl	80057fc <ld_dword>
 8006234:	4603      	mov	r3, r0
 8006236:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800623a:	4323      	orrs	r3, r4
 800623c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	8992      	ldrh	r2, [r2, #12]
 800624c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006250:	fb00 f202 	mul.w	r2, r0, r2
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	440b      	add	r3, r1
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fb0c 	bl	8005878 <st_dword>
			fs->wflag = 1;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	70da      	strb	r2, [r3, #3]
			break;
 8006266:	e006      	b.n	8006276 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <put_fat+0x22a>
			if (res != FR_OK) break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006274:	bf00      	nop
		}
	}
	return res;
 8006276:	7ffb      	ldrb	r3, [r7, #31]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3724      	adds	r7, #36	@ 0x24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd90      	pop	{r4, r7, pc}

08006280 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d904      	bls.n	80062a6 <remove_chain+0x26>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d301      	bcc.n	80062aa <remove_chain+0x2a>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e04b      	b.n	8006342 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00c      	beq.n	80062ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	69b8      	ldr	r0, [r7, #24]
 80062b8:	f7ff fec8 	bl	800604c <put_fat>
 80062bc:	4603      	mov	r3, r0
 80062be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <remove_chain+0x4a>
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	e03b      	b.n	8006342 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fdea 	bl	8005ea6 <get_fat>
 80062d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d031      	beq.n	800633e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <remove_chain+0x64>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e02e      	b.n	8006342 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ea:	d101      	bne.n	80062f0 <remove_chain+0x70>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e028      	b.n	8006342 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062f0:	2200      	movs	r2, #0
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	69b8      	ldr	r0, [r7, #24]
 80062f6:	f7ff fea9 	bl	800604c <put_fat>
 80062fa:	4603      	mov	r3, r0
 80062fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <remove_chain+0x88>
 8006304:	7ffb      	ldrb	r3, [r7, #31]
 8006306:	e01c      	b.n	8006342 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	3b02      	subs	r3, #2
 8006312:	429a      	cmp	r2, r3
 8006314:	d20b      	bcs.n	800632e <remove_chain+0xae>
			fs->free_clst++;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	791b      	ldrb	r3, [r3, #4]
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d3c6      	bcc.n	80062ca <remove_chain+0x4a>
 800633c:	e000      	b.n	8006340 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800633e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b088      	sub	sp, #32
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10d      	bne.n	800637c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <create_chain+0x2c>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	429a      	cmp	r2, r3
 8006374:	d31b      	bcc.n	80063ae <create_chain+0x64>
 8006376:	2301      	movs	r3, #1
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e018      	b.n	80063ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fd91 	bl	8005ea6 <get_fat>
 8006384:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d801      	bhi.n	8006390 <create_chain+0x46>
 800638c:	2301      	movs	r3, #1
 800638e:	e070      	b.n	8006472 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006396:	d101      	bne.n	800639c <create_chain+0x52>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e06a      	b.n	8006472 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d201      	bcs.n	80063aa <create_chain+0x60>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	e063      	b.n	8006472 <create_chain+0x128>
		scl = clst;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d307      	bcc.n	80063d2 <create_chain+0x88>
				ncl = 2;
 80063c2:	2302      	movs	r3, #2
 80063c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d901      	bls.n	80063d2 <create_chain+0x88>
 80063ce:	2300      	movs	r3, #0
 80063d0:	e04f      	b.n	8006472 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fd66 	bl	8005ea6 <get_fat>
 80063da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d003      	beq.n	80063f0 <create_chain+0xa6>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063ee:	d101      	bne.n	80063f4 <create_chain+0xaa>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	e03e      	b.n	8006472 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d1da      	bne.n	80063b2 <create_chain+0x68>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e038      	b.n	8006472 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006400:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006406:	69f9      	ldr	r1, [r7, #28]
 8006408:	6938      	ldr	r0, [r7, #16]
 800640a:	f7ff fe1f 	bl	800604c <put_fat>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <create_chain+0xe2>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d006      	beq.n	800642c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f7ff fe12 	bl	800604c <put_fat>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d116      	bne.n	8006460 <create_chain+0x116>
		fs->last_clst = ncl;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	3b02      	subs	r3, #2
 8006442:	429a      	cmp	r2, r3
 8006444:	d804      	bhi.n	8006450 <create_chain+0x106>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	1e5a      	subs	r2, r3, #1
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	b2da      	uxtb	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	711a      	strb	r2, [r3, #4]
 800645e:	e007      	b.n	8006470 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d102      	bne.n	800646c <create_chain+0x122>
 8006466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800646a:	e000      	b.n	800646e <create_chain+0x124>
 800646c:	2301      	movs	r3, #1
 800646e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006470:	69fb      	ldr	r3, [r7, #28]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	3304      	adds	r3, #4
 8006490:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	899b      	ldrh	r3, [r3, #12]
 8006496:	461a      	mov	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	fbb3 f3f2 	udiv	r3, r3, r2
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	8952      	ldrh	r2, [r2, #10]
 80064a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	613a      	str	r2, [r7, #16]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <clmt_clust+0x42>
 80064b8:	2300      	movs	r3, #0
 80064ba:	e010      	b.n	80064de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d307      	bcc.n	80064d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3304      	adds	r3, #4
 80064d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064d2:	e7e9      	b.n	80064a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80064d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
}
 80064de:	4618      	mov	r0, r3
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006500:	d204      	bcs.n	800650c <dir_sdi+0x22>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <dir_sdi+0x26>
		return FR_INT_ERR;
 800650c:	2302      	movs	r3, #2
 800650e:	e071      	b.n	80065f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <dir_sdi+0x46>
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d902      	bls.n	8006530 <dir_sdi+0x46>
		clst = fs->dirbase;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10c      	bne.n	8006550 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	8912      	ldrh	r2, [r2, #8]
 800653e:	4293      	cmp	r3, r2
 8006540:	d301      	bcc.n	8006546 <dir_sdi+0x5c>
 8006542:	2302      	movs	r3, #2
 8006544:	e056      	b.n	80065f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	61da      	str	r2, [r3, #28]
 800654e:	e02d      	b.n	80065ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	895b      	ldrh	r3, [r3, #10]
 8006554:	461a      	mov	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	899b      	ldrh	r3, [r3, #12]
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006560:	e019      	b.n	8006596 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fc9d 	bl	8005ea6 <get_fat>
 800656c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006574:	d101      	bne.n	800657a <dir_sdi+0x90>
 8006576:	2301      	movs	r3, #1
 8006578:	e03c      	b.n	80065f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d904      	bls.n	800658a <dir_sdi+0xa0>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	429a      	cmp	r2, r3
 8006588:	d301      	bcc.n	800658e <dir_sdi+0xa4>
 800658a:	2302      	movs	r3, #2
 800658c:	e032      	b.n	80065f4 <dir_sdi+0x10a>
			ofs -= csz;
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	429a      	cmp	r2, r3
 800659c:	d2e1      	bcs.n	8006562 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800659e:	6979      	ldr	r1, [r7, #20]
 80065a0:	6938      	ldr	r0, [r7, #16]
 80065a2:	f7ff fc61 	bl	8005e68 <clust2sect>
 80065a6:	4602      	mov	r2, r0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <dir_sdi+0xd4>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e01a      	b.n	80065f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69da      	ldr	r2, [r3, #28]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	899b      	ldrh	r3, [r3, #12]
 80065c6:	4619      	mov	r1, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ce:	441a      	add	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	899b      	ldrh	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80065e6:	fb00 f202 	mul.w	r2, r0, r2
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	18ca      	adds	r2, r1, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	3320      	adds	r3, #32
 8006612:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <dir_next+0x28>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006622:	d301      	bcc.n	8006628 <dir_next+0x2c>
 8006624:	2304      	movs	r3, #4
 8006626:	e0bb      	b.n	80067a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	899b      	ldrh	r3, [r3, #12]
 800662c:	461a      	mov	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	fbb3 f1f2 	udiv	r1, r3, r2
 8006634:	fb01 f202 	mul.w	r2, r1, r2
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 809d 	bne.w	800677a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	8912      	ldrh	r2, [r2, #8]
 800665a:	4293      	cmp	r3, r2
 800665c:	f0c0 808d 	bcc.w	800677a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	61da      	str	r2, [r3, #28]
 8006666:	2304      	movs	r3, #4
 8006668:	e09a      	b.n	80067a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	899b      	ldrh	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	fbb3 f3f2 	udiv	r3, r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	8952      	ldrh	r2, [r2, #10]
 800667a:	3a01      	subs	r2, #1
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d17b      	bne.n	800677a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7ff fc0b 	bl	8005ea6 <get_fat>
 8006690:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d801      	bhi.n	800669c <dir_next+0xa0>
 8006698:	2302      	movs	r3, #2
 800669a:	e081      	b.n	80067a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a2:	d101      	bne.n	80066a8 <dir_next+0xac>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e07b      	b.n	80067a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d359      	bcc.n	8006766 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	61da      	str	r2, [r3, #28]
 80066be:	2304      	movs	r3, #4
 80066c0:	e06e      	b.n	80067a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7ff fe3d 	bl	800634a <create_chain>
 80066d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <dir_next+0xe0>
 80066d8:	2307      	movs	r3, #7
 80066da:	e061      	b.n	80067a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <dir_next+0xea>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e05c      	b.n	80067a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ec:	d101      	bne.n	80066f2 <dir_next+0xf6>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e056      	b.n	80067a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fad6 	bl	8005ca4 <sync_window>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <dir_next+0x106>
 80066fe:	2301      	movs	r3, #1
 8006700:	e04e      	b.n	80067a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	899b      	ldrh	r3, [r3, #12]
 800670c:	461a      	mov	r2, r3
 800670e:	2100      	movs	r1, #0
 8006710:	f7ff f8ff 	bl	8005912 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	6979      	ldr	r1, [r7, #20]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff fba4 	bl	8005e68 <clust2sect>
 8006720:	4602      	mov	r2, r0
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	635a      	str	r2, [r3, #52]	@ 0x34
 8006726:	e012      	b.n	800674e <dir_next+0x152>
						fs->wflag = 1;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff fab8 	bl	8005ca4 <sync_window>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <dir_next+0x142>
 800673a:	2301      	movs	r3, #1
 800673c:	e030      	b.n	80067a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	635a      	str	r2, [r3, #52]	@ 0x34
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	895b      	ldrh	r3, [r3, #10]
 8006752:	461a      	mov	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4293      	cmp	r3, r2
 8006758:	d3e6      	bcc.n	8006728 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800676c:	6979      	ldr	r1, [r7, #20]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fb7a 	bl	8005e68 <clust2sect>
 8006774:	4602      	mov	r2, r0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006792:	fb00 f202 	mul.w	r2, r0, r2
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	18ca      	adds	r2, r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fe95 	bl	80064ea <dir_sdi>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d12b      	bne.n	8006822 <dir_alloc+0x7a>
		n = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff faa9 	bl	8005d2c <move_window>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11d      	bne.n	8006820 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2be5      	cmp	r3, #229	@ 0xe5
 80067ec:	d004      	beq.n	80067f8 <dir_alloc+0x50>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d107      	bne.n	8006808 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3301      	adds	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d102      	bne.n	800680c <dir_alloc+0x64>
 8006806:	e00c      	b.n	8006822 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800680c:	2101      	movs	r1, #1
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff fef4 	bl	80065fc <dir_next>
 8006814:	4603      	mov	r3, r0
 8006816:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0d7      	beq.n	80067ce <dir_alloc+0x26>
 800681e:	e000      	b.n	8006822 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006820:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d101      	bne.n	800682c <dir_alloc+0x84>
 8006828:	2307      	movs	r3, #7
 800682a:	75fb      	strb	r3, [r7, #23]
	return res;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	331a      	adds	r3, #26
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe ffc1 	bl	80057cc <ld_word>
 800684a:	4603      	mov	r3, r0
 800684c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d109      	bne.n	800686a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	3314      	adds	r3, #20
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe ffb6 	bl	80057cc <ld_word>
 8006860:	4603      	mov	r3, r0
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	331a      	adds	r3, #26
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	b292      	uxth	r2, r2
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe ffd9 	bl	8005842 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d109      	bne.n	80068ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f103 0214 	add.w	r2, r3, #20
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe ffcb 	bl	8005842 <st_word>
	}
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	331a      	adds	r3, #26
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe ff82 	bl	80057cc <ld_word>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <cmp_lfn+0x1e>
 80068ce:	2300      	movs	r3, #0
 80068d0:	e059      	b.n	8006986 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	4613      	mov	r3, r2
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068e8:	2301      	movs	r3, #1
 80068ea:	81fb      	strh	r3, [r7, #14]
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	e033      	b.n	800695a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80068f2:	4a27      	ldr	r2, [pc, #156]	@ (8006990 <cmp_lfn+0xdc>)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4413      	add	r3, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe ff63 	bl	80057cc <ld_word>
 8006906:	4603      	mov	r3, r0
 8006908:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2bfe      	cmp	r3, #254	@ 0xfe
 8006914:	d812      	bhi.n	800693c <cmp_lfn+0x88>
 8006916:	89bb      	ldrh	r3, [r7, #12]
 8006918:	4618      	mov	r0, r3
 800691a:	f001 ff3b 	bl	8008794 <ff_wtoupper>
 800691e:	4603      	mov	r3, r0
 8006920:	461c      	mov	r4, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	617a      	str	r2, [r7, #20]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f001 ff2f 	bl	8008794 <ff_wtoupper>
 8006936:	4603      	mov	r3, r0
 8006938:	429c      	cmp	r4, r3
 800693a:	d001      	beq.n	8006940 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800693c:	2300      	movs	r3, #0
 800693e:	e022      	b.n	8006986 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006940:	89bb      	ldrh	r3, [r7, #12]
 8006942:	81fb      	strh	r3, [r7, #14]
 8006944:	e006      	b.n	8006954 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006946:	89bb      	ldrh	r3, [r7, #12]
 8006948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800694c:	4293      	cmp	r3, r2
 800694e:	d001      	beq.n	8006954 <cmp_lfn+0xa0>
 8006950:	2300      	movs	r3, #0
 8006952:	e018      	b.n	8006986 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3301      	adds	r3, #1
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b0c      	cmp	r3, #12
 800695e:	d9c8      	bls.n	80068f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <cmp_lfn+0xd0>
 800696c:	89fb      	ldrh	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d008      	beq.n	8006984 <cmp_lfn+0xd0>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <cmp_lfn+0xd0>
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006984:	2301      	movs	r3, #1
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	08008a1c 	.word	0x08008a1c

08006994 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	331a      	adds	r3, #26
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe ff12 	bl	80057cc <ld_word>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <pick_lfn+0x1e>
 80069ae:	2300      	movs	r3, #0
 80069b0:	e04d      	b.n	8006a4e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ba:	1e5a      	subs	r2, r3, #1
 80069bc:	4613      	mov	r3, r2
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069c8:	2301      	movs	r3, #1
 80069ca:	81fb      	strh	r3, [r7, #14]
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	e028      	b.n	8006a24 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80069d2:	4a21      	ldr	r2, [pc, #132]	@ (8006a58 <pick_lfn+0xc4>)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4413      	add	r3, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fef3 	bl	80057cc <ld_word>
 80069e6:	4603      	mov	r3, r0
 80069e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80069f4:	d901      	bls.n	80069fa <pick_lfn+0x66>
 80069f6:	2300      	movs	r3, #0
 80069f8:	e029      	b.n	8006a4e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80069fa:	89bb      	ldrh	r3, [r7, #12]
 80069fc:	81fb      	strh	r3, [r7, #14]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	617a      	str	r2, [r7, #20]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	89fa      	ldrh	r2, [r7, #14]
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e006      	b.n	8006a1e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006a10:	89bb      	ldrh	r3, [r7, #12]
 8006a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d001      	beq.n	8006a1e <pick_lfn+0x8a>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e017      	b.n	8006a4e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d9d3      	bls.n	80069d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a3a:	d901      	bls.n	8006a40 <pick_lfn+0xac>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e006      	b.n	8006a4e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	2200      	movs	r2, #0
 8006a4a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006a4c:	2301      	movs	r3, #1
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	08008a1c 	.word	0x08008a1c

08006a5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	71fb      	strb	r3, [r7, #7]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	330d      	adds	r3, #13
 8006a76:	79ba      	ldrb	r2, [r7, #6]
 8006a78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	330b      	adds	r3, #11
 8006a7e:	220f      	movs	r2, #15
 8006a80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	330c      	adds	r3, #12
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	331a      	adds	r3, #26
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fed6 	bl	8005842 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	82fb      	strh	r3, [r7, #22]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006aae:	8afb      	ldrh	r3, [r7, #22]
 8006ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d007      	beq.n	8006ac8 <put_lfn+0x6c>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	61fa      	str	r2, [r7, #28]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006ac8:	4a17      	ldr	r2, [pc, #92]	@ (8006b28 <put_lfn+0xcc>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	4413      	add	r3, r2
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	8afa      	ldrh	r2, [r7, #22]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe feb1 	bl	8005842 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ae0:	8afb      	ldrh	r3, [r7, #22]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <put_lfn+0x90>
 8006ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006aea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d9da      	bls.n	8006aae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006af8:	8afb      	ldrh	r3, [r7, #22]
 8006afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d006      	beq.n	8006b10 <put_lfn+0xb4>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <put_lfn+0xbc>
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	79fa      	ldrb	r2, [r7, #7]
 8006b1c:	701a      	strb	r2, [r3, #0]
}
 8006b1e:	bf00      	nop
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	08008a1c 	.word	0x08008a1c

08006b2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	@ 0x30
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006b3a:	220b      	movs	r2, #11
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7fe fec6 	bl	80058d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d92b      	bls.n	8006ba2 <gen_numname+0x76>
		sr = seq;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006b4e:	e022      	b.n	8006b96 <gen_numname+0x6a>
			wc = *lfn++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	1c9a      	adds	r2, r3, #2
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b5e:	e017      	b.n	8006b90 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	005a      	lsls	r2, r3, #1
 8006b64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <gen_numname+0x5e>
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006b84:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006b88:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	2b0f      	cmp	r3, #15
 8006b94:	d9e4      	bls.n	8006b60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1d8      	bne.n	8006b50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006ba2:	2307      	movs	r3, #7
 8006ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3330      	adds	r3, #48	@ 0x30
 8006bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bba:	2b39      	cmp	r3, #57	@ 0x39
 8006bbc:	d904      	bls.n	8006bc8 <gen_numname+0x9c>
 8006bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	1e5a      	subs	r2, r3, #1
 8006bcc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006bce:	3330      	adds	r3, #48	@ 0x30
 8006bd0:	443b      	add	r3, r7
 8006bd2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006bd6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1df      	bne.n	8006ba6 <gen_numname+0x7a>
	ns[i] = '~';
 8006be6:	f107 0214 	add.w	r2, r7, #20
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	4413      	add	r3, r2
 8006bee:	227e      	movs	r2, #126	@ 0x7e
 8006bf0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf6:	e002      	b.n	8006bfe <gen_numname+0xd2>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d205      	bcs.n	8006c12 <gen_numname+0xe6>
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	4413      	add	r3, r2
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d1f2      	bne.n	8006bf8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	2b07      	cmp	r3, #7
 8006c16:	d807      	bhi.n	8006c28 <gen_numname+0xfc>
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c1e:	3330      	adds	r3, #48	@ 0x30
 8006c20:	443b      	add	r3, r7
 8006c22:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006c26:	e000      	b.n	8006c2a <gen_numname+0xfe>
 8006c28:	2120      	movs	r1, #32
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	460a      	mov	r2, r1
 8006c36:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	2b07      	cmp	r3, #7
 8006c3c:	d9e9      	bls.n	8006c12 <gen_numname+0xe6>
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	3730      	adds	r7, #48	@ 0x30
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c54:	230b      	movs	r3, #11
 8006c56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	0852      	lsrs	r2, r2, #1
 8006c5e:	01db      	lsls	r3, r3, #7
 8006c60:	4313      	orrs	r3, r2
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	6079      	str	r1, [r7, #4]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ed      	bne.n	8006c58 <sum_sfn+0x10>
	return sum;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006c94:	2304      	movs	r3, #4
 8006c96:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006c9e:	23ff      	movs	r3, #255	@ 0xff
 8006ca0:	757b      	strb	r3, [r7, #21]
 8006ca2:	23ff      	movs	r3, #255	@ 0xff
 8006ca4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006ca6:	e081      	b.n	8006dac <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7ff f83c 	bl	8005d2c <move_window>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d17c      	bne.n	8006db8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006cc6:	7dbb      	ldrb	r3, [r7, #22]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006ccc:	2304      	movs	r3, #4
 8006cce:	75fb      	strb	r3, [r7, #23]
 8006cd0:	e077      	b.n	8006dc2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	330b      	adds	r3, #11
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7bfa      	ldrb	r2, [r7, #15]
 8006ce4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006ce6:	7dbb      	ldrb	r3, [r7, #22]
 8006ce8:	2be5      	cmp	r3, #229	@ 0xe5
 8006cea:	d00e      	beq.n	8006d0a <dir_read+0x80>
 8006cec:	7dbb      	ldrb	r3, [r7, #22]
 8006cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf0:	d00b      	beq.n	8006d0a <dir_read+0x80>
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	f023 0320 	bic.w	r3, r3, #32
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2301      	moveq	r3, #1
 8006cfe:	2300      	movne	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d002      	beq.n	8006d10 <dir_read+0x86>
				ord = 0xFF;
 8006d0a:	23ff      	movs	r3, #255	@ 0xff
 8006d0c:	757b      	strb	r3, [r7, #21]
 8006d0e:	e044      	b.n	8006d9a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d12f      	bne.n	8006d76 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006d16:	7dbb      	ldrb	r3, [r7, #22]
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	7b5b      	ldrb	r3, [r3, #13]
 8006d26:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006d28:	7dbb      	ldrb	r3, [r7, #22]
 8006d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2e:	75bb      	strb	r3, [r7, #22]
 8006d30:	7dbb      	ldrb	r3, [r7, #22]
 8006d32:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d3c:	7dba      	ldrb	r2, [r7, #22]
 8006d3e:	7d7b      	ldrb	r3, [r7, #21]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d115      	bne.n	8006d70 <dir_read+0xe6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	330d      	adds	r3, #13
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	7d3a      	ldrb	r2, [r7, #20]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d10e      	bne.n	8006d70 <dir_read+0xe6>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7ff fe19 	bl	8006994 <pick_lfn>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <dir_read+0xe6>
 8006d68:	7d7b      	ldrb	r3, [r7, #21]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e000      	b.n	8006d72 <dir_read+0xe8>
 8006d70:	23ff      	movs	r3, #255	@ 0xff
 8006d72:	757b      	strb	r3, [r7, #21]
 8006d74:	e011      	b.n	8006d9a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006d76:	7d7b      	ldrb	r3, [r7, #21]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <dir_read+0x106>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ff61 	bl	8006c48 <sum_sfn>
 8006d86:	4603      	mov	r3, r0
 8006d88:	461a      	mov	r2, r3
 8006d8a:	7d3b      	ldrb	r3, [r7, #20]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d015      	beq.n	8006dbc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8006d98:	e010      	b.n	8006dbc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff fc2d 	bl	80065fc <dir_next>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <dir_read+0x136>
	while (dp->sect) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f af79 	bne.w	8006ca8 <dir_read+0x1e>
 8006db6:	e004      	b.n	8006dc2 <dir_read+0x138>
		if (res != FR_OK) break;
 8006db8:	bf00      	nop
 8006dba:	e002      	b.n	8006dc2 <dir_read+0x138>
					break;
 8006dbc:	bf00      	nop
 8006dbe:	e000      	b.n	8006dc2 <dir_read+0x138>
		if (res != FR_OK) break;
 8006dc0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <dir_read+0x144>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	61da      	str	r2, [r3, #28]
	return res;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006de6:	2100      	movs	r1, #0
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fb7e 	bl	80064ea <dir_sdi>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <dir_find+0x24>
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	e0a9      	b.n	8006f50 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006dfc:	23ff      	movs	r3, #255	@ 0xff
 8006dfe:	753b      	strb	r3, [r7, #20]
 8006e00:	7d3b      	ldrb	r3, [r7, #20]
 8006e02:	757b      	strb	r3, [r7, #21]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6938      	ldr	r0, [r7, #16]
 8006e14:	f7fe ff8a 	bl	8005d2c <move_window>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 8090 	bne.w	8006f44 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e2c:	7dbb      	ldrb	r3, [r7, #22]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <dir_find+0x60>
 8006e32:	2304      	movs	r3, #4
 8006e34:	75fb      	strb	r3, [r7, #23]
 8006e36:	e08a      	b.n	8006f4e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	330b      	adds	r3, #11
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e44:	73fb      	strb	r3, [r7, #15]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7bfa      	ldrb	r2, [r7, #15]
 8006e4a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006e4c:	7dbb      	ldrb	r3, [r7, #22]
 8006e4e:	2be5      	cmp	r3, #229	@ 0xe5
 8006e50:	d007      	beq.n	8006e62 <dir_find+0x8a>
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <dir_find+0x98>
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d006      	beq.n	8006e70 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e62:	23ff      	movs	r3, #255	@ 0xff
 8006e64:	757b      	strb	r3, [r7, #21]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e6e:	e05e      	b.n	8006f2e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d136      	bne.n	8006ee4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d154      	bne.n	8006f2e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	7b5b      	ldrb	r3, [r3, #13]
 8006e94:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e96:	7dbb      	ldrb	r3, [r7, #22]
 8006e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e9c:	75bb      	strb	r3, [r7, #22]
 8006e9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ea0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006eaa:	7dba      	ldrb	r2, [r7, #22]
 8006eac:	7d7b      	ldrb	r3, [r7, #21]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d115      	bne.n	8006ede <dir_find+0x106>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	330d      	adds	r3, #13
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	7d3a      	ldrb	r2, [r7, #20]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d10e      	bne.n	8006ede <dir_find+0x106>
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7ff fcf2 	bl	80068b4 <cmp_lfn>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <dir_find+0x106>
 8006ed6:	7d7b      	ldrb	r3, [r7, #21]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e000      	b.n	8006ee0 <dir_find+0x108>
 8006ede:	23ff      	movs	r3, #255	@ 0xff
 8006ee0:	757b      	strb	r3, [r7, #21]
 8006ee2:	e024      	b.n	8006f2e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ee4:	7d7b      	ldrb	r3, [r7, #21]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <dir_find+0x126>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff feaa 	bl	8006c48 <sum_sfn>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	7d3b      	ldrb	r3, [r7, #20]
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d024      	beq.n	8006f48 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <dir_find+0x14a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a18      	ldr	r0, [r3, #32]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3324      	adds	r3, #36	@ 0x24
 8006f14:	220b      	movs	r2, #11
 8006f16:	4619      	mov	r1, r3
 8006f18:	f7fe fd16 	bl	8005948 <mem_cmp>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d014      	beq.n	8006f4c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f22:	23ff      	movs	r3, #255	@ 0xff
 8006f24:	757b      	strb	r3, [r7, #21]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f2c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fb63 	bl	80065fc <dir_next>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f43f af65 	beq.w	8006e0c <dir_find+0x34>
 8006f42:	e004      	b.n	8006f4e <dir_find+0x176>
		if (res != FR_OK) break;
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f4c:	bf00      	nop

	return res;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	@ 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006f6c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <dir_register+0x20>
 8006f74:	2306      	movs	r3, #6
 8006f76:	e0e0      	b.n	800713a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7c:	e002      	b.n	8006f84 <dir_register+0x2c>
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	3301      	adds	r3, #1
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1f4      	bne.n	8006f7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006f9a:	f107 030c 	add.w	r3, r7, #12
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fc95 	bl	80058d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d032      	beq.n	8007016 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2240      	movs	r2, #64	@ 0x40
 8006fb4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006fb8:	2301      	movs	r3, #1
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fbc:	e016      	b.n	8006fec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	f107 010c 	add.w	r1, r7, #12
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	f7ff fdad 	bl	8006b2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff ff00 	bl	8006dd8 <dir_find>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	3301      	adds	r3, #1
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	2b63      	cmp	r3, #99	@ 0x63
 8006ff0:	d9e5      	bls.n	8006fbe <dir_register+0x66>
 8006ff2:	e000      	b.n	8006ff6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006ff4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	2b64      	cmp	r3, #100	@ 0x64
 8006ffa:	d101      	bne.n	8007000 <dir_register+0xa8>
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	e09c      	b.n	800713a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007004:	2b04      	cmp	r3, #4
 8007006:	d002      	beq.n	800700e <dir_register+0xb6>
 8007008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800700c:	e095      	b.n	800713a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800700e:	7dfa      	ldrb	r2, [r7, #23]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <dir_register+0xd8>
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	330c      	adds	r3, #12
 8007024:	4a47      	ldr	r2, [pc, #284]	@ (8007144 <dir_register+0x1ec>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	3301      	adds	r3, #1
 800702e:	e000      	b.n	8007032 <dir_register+0xda>
 8007030:	2301      	movs	r3, #1
 8007032:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007034:	6a39      	ldr	r1, [r7, #32]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fbb6 	bl	80067a8 <dir_alloc>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d148      	bne.n	80070dc <dir_register+0x184>
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	3b01      	subs	r3, #1
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d042      	beq.n	80070dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	015b      	lsls	r3, r3, #5
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fa41 	bl	80064ea <dir_sdi>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800706e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d132      	bne.n	80070dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3324      	adds	r3, #36	@ 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fde4 	bl	8006c48 <sum_sfn>
 8007080:	4603      	mov	r3, r0
 8007082:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4619      	mov	r1, r3
 800708a:	69f8      	ldr	r0, [r7, #28]
 800708c:	f7fe fe4e 	bl	8005d2c <move_window>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11d      	bne.n	80070da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	6918      	ldr	r0, [r3, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a19      	ldr	r1, [r3, #32]
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	7efb      	ldrb	r3, [r7, #27]
 80070ac:	f7ff fcd6 	bl	8006a5c <put_lfn>
				fs->wflag = 1;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2201      	movs	r2, #1
 80070b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80070b6:	2100      	movs	r1, #0
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fa9f 	bl	80065fc <dir_next>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80070c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d107      	bne.n	80070dc <dir_register+0x184>
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1d5      	bne.n	8007084 <dir_register+0x12c>
 80070d8:	e000      	b.n	80070dc <dir_register+0x184>
				if (res != FR_OK) break;
 80070da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80070dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d128      	bne.n	8007136 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	4619      	mov	r1, r3
 80070ea:	69f8      	ldr	r0, [r7, #28]
 80070ec:	f7fe fe1e 	bl	8005d2c <move_window>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80070f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d11b      	bne.n	8007136 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	2220      	movs	r2, #32
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fc03 	bl	8005912 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a18      	ldr	r0, [r3, #32]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3324      	adds	r3, #36	@ 0x24
 8007114:	220b      	movs	r2, #11
 8007116:	4619      	mov	r1, r3
 8007118:	f7fe fbda 	bl	80058d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	330c      	adds	r3, #12
 8007128:	f002 0218 	and.w	r2, r2, #24
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2201      	movs	r2, #1
 8007134:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800713a:	4618      	mov	r0, r3
 800713c:	3730      	adds	r7, #48	@ 0x30
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	4ec4ec4f 	.word	0x4ec4ec4f

08007148 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007164:	d007      	beq.n	8007176 <dir_remove+0x2e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff f9bc 	bl	80064ea <dir_sdi>
 8007172:	4603      	mov	r3, r0
 8007174:	e000      	b.n	8007178 <dir_remove+0x30>
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d128      	bne.n	80071d2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	4619      	mov	r1, r3
 8007186:	6938      	ldr	r0, [r7, #16]
 8007188:	f7fe fdd0 	bl	8005d2c <move_window>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d115      	bne.n	80071c2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	22e5      	movs	r2, #229	@ 0xe5
 800719c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2201      	movs	r2, #1
 80071a2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d90b      	bls.n	80071c6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fa23 	bl	80065fc <dir_next>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0df      	beq.n	8007180 <dir_remove+0x38>
 80071c0:	e002      	b.n	80071c8 <dir_remove+0x80>
			if (res != FR_OK) break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80071c6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d101      	bne.n	80071d2 <dir_remove+0x8a>
 80071ce:	2302      	movs	r3, #2
 80071d0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	@ 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	61ba      	str	r2, [r7, #24]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800720a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800720c:	2b1f      	cmp	r3, #31
 800720e:	d940      	bls.n	8007292 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007212:	2b2f      	cmp	r3, #47	@ 0x2f
 8007214:	d006      	beq.n	8007224 <create_name+0x48>
 8007216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007218:	2b5c      	cmp	r3, #92	@ 0x5c
 800721a:	d110      	bne.n	800723e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800721c:	e002      	b.n	8007224 <create_name+0x48>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3301      	adds	r3, #1
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b2f      	cmp	r3, #47	@ 0x2f
 800722e:	d0f6      	beq.n	800721e <create_name+0x42>
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	4413      	add	r3, r2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b5c      	cmp	r3, #92	@ 0x5c
 800723a:	d0f0      	beq.n	800721e <create_name+0x42>
			break;
 800723c:	e02a      	b.n	8007294 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2bfe      	cmp	r3, #254	@ 0xfe
 8007242:	d901      	bls.n	8007248 <create_name+0x6c>
 8007244:	2306      	movs	r3, #6
 8007246:	e17d      	b.n	8007544 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800724a:	b2db      	uxtb	r3, r3
 800724c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800724e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fa62 	bl	800871c <ff_convert>
 8007258:	4603      	mov	r3, r0
 800725a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800725c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <create_name+0x8a>
 8007262:	2306      	movs	r3, #6
 8007264:	e16e      	b.n	8007544 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007268:	2b7f      	cmp	r3, #127	@ 0x7f
 800726a:	d809      	bhi.n	8007280 <create_name+0xa4>
 800726c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800726e:	4619      	mov	r1, r3
 8007270:	488d      	ldr	r0, [pc, #564]	@ (80074a8 <create_name+0x2cc>)
 8007272:	f7fe fb90 	bl	8005996 <chk_chr>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <create_name+0xa4>
 800727c:	2306      	movs	r3, #6
 800727e:	e161      	b.n	8007544 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	617a      	str	r2, [r7, #20]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800728e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007290:	e7b4      	b.n	80071fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007292:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	441a      	add	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800729e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a0:	2b1f      	cmp	r3, #31
 80072a2:	d801      	bhi.n	80072a8 <create_name+0xcc>
 80072a4:	2304      	movs	r3, #4
 80072a6:	e000      	b.n	80072aa <create_name+0xce>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80072ae:	e011      	b.n	80072d4 <create_name+0xf8>
		w = lfn[di - 1];
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80072b6:	3b01      	subs	r3, #1
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80072c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d002      	beq.n	80072ce <create_name+0xf2>
 80072c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80072cc:	d106      	bne.n	80072dc <create_name+0x100>
		di--;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ea      	bne.n	80072b0 <create_name+0xd4>
 80072da:	e000      	b.n	80072de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80072dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <create_name+0x118>
 80072f0:	2306      	movs	r3, #6
 80072f2:	e127      	b.n	8007544 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3324      	adds	r3, #36	@ 0x24
 80072f8:	220b      	movs	r2, #11
 80072fa:	2120      	movs	r1, #32
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fb08 	bl	8005912 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	e002      	b.n	800730e <create_name+0x132>
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	3301      	adds	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	2b20      	cmp	r3, #32
 800731a:	d0f5      	beq.n	8007308 <create_name+0x12c>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	2b2e      	cmp	r3, #46	@ 0x2e
 8007328:	d0ee      	beq.n	8007308 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <create_name+0x168>
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007334:	f043 0303 	orr.w	r3, r3, #3
 8007338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800733c:	e002      	b.n	8007344 <create_name+0x168>
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	3b01      	subs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <create_name+0x182>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007350:	3b01      	subs	r3, #1
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	2b2e      	cmp	r3, #46	@ 0x2e
 800735c:	d1ef      	bne.n	800733e <create_name+0x162>

	i = b = 0; ni = 8;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007364:	2300      	movs	r3, #0
 8007366:	623b      	str	r3, [r7, #32]
 8007368:	2308      	movs	r3, #8
 800736a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	61ba      	str	r2, [r7, #24]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800737c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8090 	beq.w	80074a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007386:	2b20      	cmp	r3, #32
 8007388:	d006      	beq.n	8007398 <create_name+0x1bc>
 800738a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800738c:	2b2e      	cmp	r3, #46	@ 0x2e
 800738e:	d10a      	bne.n	80073a6 <create_name+0x1ca>
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	429a      	cmp	r2, r3
 8007396:	d006      	beq.n	80073a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800739c:	f043 0303 	orr.w	r3, r3, #3
 80073a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073a4:	e07d      	b.n	80074a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80073a6:	6a3a      	ldr	r2, [r7, #32]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d203      	bcs.n	80073b6 <create_name+0x1da>
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d123      	bne.n	80073fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	2b0b      	cmp	r3, #11
 80073ba:	d106      	bne.n	80073ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80073bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073c0:	f043 0303 	orr.w	r3, r3, #3
 80073c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073c8:	e075      	b.n	80074b6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d005      	beq.n	80073de <create_name+0x202>
 80073d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073d6:	f043 0303 	orr.w	r3, r3, #3
 80073da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d866      	bhi.n	80074b4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	2308      	movs	r3, #8
 80073ec:	623b      	str	r3, [r7, #32]
 80073ee:	230b      	movs	r3, #11
 80073f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80073f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80073fc:	e051      	b.n	80074a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80073fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007400:	2b7f      	cmp	r3, #127	@ 0x7f
 8007402:	d914      	bls.n	800742e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f987 	bl	800871c <ff_convert>
 800740e:	4603      	mov	r3, r0
 8007410:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <create_name+0x246>
 8007418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800741a:	3b80      	subs	r3, #128	@ 0x80
 800741c:	4a23      	ldr	r2, [pc, #140]	@ (80074ac <create_name+0x2d0>)
 800741e:	5cd3      	ldrb	r3, [r2, r3]
 8007420:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007426:	f043 0302 	orr.w	r3, r3, #2
 800742a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800742e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <create_name+0x268>
 8007434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007436:	4619      	mov	r1, r3
 8007438:	481d      	ldr	r0, [pc, #116]	@ (80074b0 <create_name+0x2d4>)
 800743a:	f7fe faac 	bl	8005996 <chk_chr>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007444:	235f      	movs	r3, #95	@ 0x5f
 8007446:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800744c:	f043 0303 	orr.w	r3, r3, #3
 8007450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007454:	e01b      	b.n	800748e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007458:	2b40      	cmp	r3, #64	@ 0x40
 800745a:	d909      	bls.n	8007470 <create_name+0x294>
 800745c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800745e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007460:	d806      	bhi.n	8007470 <create_name+0x294>
					b |= 2;
 8007462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007466:	f043 0302 	orr.w	r3, r3, #2
 800746a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800746e:	e00e      	b.n	800748e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007472:	2b60      	cmp	r3, #96	@ 0x60
 8007474:	d90b      	bls.n	800748e <create_name+0x2b2>
 8007476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007478:	2b7a      	cmp	r3, #122	@ 0x7a
 800747a:	d808      	bhi.n	800748e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800747c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007488:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800748a:	3b20      	subs	r3, #32
 800748c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	623a      	str	r2, [r7, #32]
 8007494:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007496:	b2d1      	uxtb	r1, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	460a      	mov	r2, r1
 800749e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80074a2:	e763      	b.n	800736c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80074a4:	bf00      	nop
 80074a6:	e006      	b.n	80074b6 <create_name+0x2da>
 80074a8:	08008928 	.word	0x08008928
 80074ac:	0800899c 	.word	0x0800899c
 80074b0:	08008934 	.word	0x08008934
			if (si > di) break;			/* No extension */
 80074b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074bc:	2be5      	cmp	r3, #229	@ 0xe5
 80074be:	d103      	bne.n	80074c8 <create_name+0x2ec>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2205      	movs	r2, #5
 80074c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d104      	bne.n	80074d8 <create_name+0x2fc>
 80074ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80074d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d005      	beq.n	80074f0 <create_name+0x314>
 80074e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d105      	bne.n	80074fc <create_name+0x320>
 80074f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074f4:	f043 0302 	orr.w	r3, r3, #2
 80074f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80074fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d117      	bne.n	8007538 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d105      	bne.n	8007520 <create_name+0x344>
 8007514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007518:	f043 0310 	orr.w	r3, r3, #16
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007524:	f003 030c 	and.w	r3, r3, #12
 8007528:	2b04      	cmp	r3, #4
 800752a:	d105      	bne.n	8007538 <create_name+0x35c>
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007530:	f043 0308 	orr.w	r3, r3, #8
 8007534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800753e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007542:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007544:	4618      	mov	r0, r3
 8007546:	3728      	adds	r7, #40	@ 0x28
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007560:	e002      	b.n	8007568 <follow_path+0x1c>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b2f      	cmp	r3, #47	@ 0x2f
 800756e:	d0f8      	beq.n	8007562 <follow_path+0x16>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b5c      	cmp	r3, #92	@ 0x5c
 8007576:	d0f4      	beq.n	8007562 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2200      	movs	r2, #0
 800757c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b1f      	cmp	r3, #31
 8007584:	d80a      	bhi.n	800759c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2280      	movs	r2, #128	@ 0x80
 800758a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fe ffaa 	bl	80064ea <dir_sdi>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
 800759a:	e048      	b.n	800762e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800759c:	463b      	mov	r3, r7
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fe1b 	bl	80071dc <create_name>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d139      	bne.n	8007624 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fc11 	bl	8006dd8 <dir_find>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d12c      	bne.n	8007628 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d127      	bne.n	8007628 <follow_path+0xdc>
 80075d8:	2305      	movs	r3, #5
 80075da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80075dc:	e024      	b.n	8007628 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d121      	bne.n	800762c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	799b      	ldrb	r3, [r3, #6]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80075f4:	2305      	movs	r3, #5
 80075f6:	75fb      	strb	r3, [r7, #23]
 80075f8:	e019      	b.n	800762e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	8992      	ldrh	r2, [r2, #12]
 8007608:	fbb3 f0f2 	udiv	r0, r3, r2
 800760c:	fb00 f202 	mul.w	r2, r0, r2
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	440b      	add	r3, r1
 8007614:	4619      	mov	r1, r3
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff f90d 	bl	8006836 <ld_clust>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007622:	e7bb      	b.n	800759c <follow_path+0x50>
			if (res != FR_OK) break;
 8007624:	bf00      	nop
 8007626:	e002      	b.n	800762e <follow_path+0xe2>
				break;
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800762c:	bf00      	nop
			}
		}
	}

	return res;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007644:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d031      	beq.n	80076b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e002      	b.n	800765c <get_ldnumber+0x24>
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	3301      	adds	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b1f      	cmp	r3, #31
 8007662:	d903      	bls.n	800766c <get_ldnumber+0x34>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b3a      	cmp	r3, #58	@ 0x3a
 800766a:	d1f4      	bne.n	8007656 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b3a      	cmp	r3, #58	@ 0x3a
 8007672:	d11c      	bne.n	80076ae <get_ldnumber+0x76>
			tp = *path;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	60fa      	str	r2, [r7, #12]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	3b30      	subs	r3, #48	@ 0x30
 8007684:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b09      	cmp	r3, #9
 800768a:	d80e      	bhi.n	80076aa <get_ldnumber+0x72>
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d10a      	bne.n	80076aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d107      	bne.n	80076aa <get_ldnumber+0x72>
					vol = (int)i;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	3301      	adds	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	e002      	b.n	80076b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80076b2:	693b      	ldr	r3, [r7, #16]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	70da      	strb	r2, [r3, #3]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076d6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fe fb26 	bl	8005d2c <move_window>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <check_fs+0x2a>
 80076e6:	2304      	movs	r3, #4
 80076e8:	e038      	b.n	800775c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3338      	adds	r3, #56	@ 0x38
 80076ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe f86a 	bl	80057cc <ld_word>
 80076f8:	4603      	mov	r3, r0
 80076fa:	461a      	mov	r2, r3
 80076fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <check_fs+0x48>
 8007704:	2303      	movs	r3, #3
 8007706:	e029      	b.n	800775c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800770e:	2be9      	cmp	r3, #233	@ 0xe9
 8007710:	d009      	beq.n	8007726 <check_fs+0x66>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007718:	2beb      	cmp	r3, #235	@ 0xeb
 800771a:	d11e      	bne.n	800775a <check_fs+0x9a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007722:	2b90      	cmp	r3, #144	@ 0x90
 8007724:	d119      	bne.n	800775a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3338      	adds	r3, #56	@ 0x38
 800772a:	3336      	adds	r3, #54	@ 0x36
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe f865 	bl	80057fc <ld_dword>
 8007732:	4603      	mov	r3, r0
 8007734:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007738:	4a0a      	ldr	r2, [pc, #40]	@ (8007764 <check_fs+0xa4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d101      	bne.n	8007742 <check_fs+0x82>
 800773e:	2300      	movs	r3, #0
 8007740:	e00c      	b.n	800775c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3338      	adds	r3, #56	@ 0x38
 8007746:	3352      	adds	r3, #82	@ 0x52
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe f857 	bl	80057fc <ld_dword>
 800774e:	4603      	mov	r3, r0
 8007750:	4a05      	ldr	r2, [pc, #20]	@ (8007768 <check_fs+0xa8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d101      	bne.n	800775a <check_fs+0x9a>
 8007756:	2300      	movs	r3, #0
 8007758:	e000      	b.n	800775c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800775a:	2302      	movs	r3, #2
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	00544146 	.word	0x00544146
 8007768:	33544146 	.word	0x33544146

0800776c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b096      	sub	sp, #88	@ 0x58
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff ff59 	bl	8007638 <get_ldnumber>
 8007786:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	da01      	bge.n	8007792 <find_volume+0x26>
 800778e:	230b      	movs	r3, #11
 8007790:	e265      	b.n	8007c5e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007792:	4a9f      	ldr	r2, [pc, #636]	@ (8007a10 <find_volume+0x2a4>)
 8007794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <find_volume+0x3a>
 80077a2:	230c      	movs	r3, #12
 80077a4:	e25b      	b.n	8007c5e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd ff63 	bl	800568c <disk_status>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80077cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10c      	bne.n	80077f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <find_volume+0x82>
 80077de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80077ea:	230a      	movs	r3, #10
 80077ec:	e237      	b.n	8007c5e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80077ee:	2300      	movs	r3, #0
 80077f0:	e235      	b.n	8007c5e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80077f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd ff5b 	bl	80056c0 <disk_initialize>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007810:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800781c:	2303      	movs	r3, #3
 800781e:	e21e      	b.n	8007c5e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <find_volume+0xca>
 8007826:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007832:	230a      	movs	r3, #10
 8007834:	e213      	b.n	8007c5e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	7858      	ldrb	r0, [r3, #1]
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	330c      	adds	r3, #12
 800783e:	461a      	mov	r2, r3
 8007840:	2102      	movs	r1, #2
 8007842:	f7fd ffa5 	bl	8005790 <disk_ioctl>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <find_volume+0xe4>
 800784c:	2301      	movs	r3, #1
 800784e:	e206      	b.n	8007c5e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007852:	899b      	ldrh	r3, [r3, #12]
 8007854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007858:	d80d      	bhi.n	8007876 <find_volume+0x10a>
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	899b      	ldrh	r3, [r3, #12]
 800785e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007862:	d308      	bcc.n	8007876 <find_volume+0x10a>
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	899b      	ldrh	r3, [r3, #12]
 8007868:	461a      	mov	r2, r3
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	899b      	ldrh	r3, [r3, #12]
 800786e:	3b01      	subs	r3, #1
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <find_volume+0x10e>
 8007876:	2301      	movs	r3, #1
 8007878:	e1f1      	b.n	8007c5e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800787e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007880:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007882:	f7ff ff1d 	bl	80076c0 <check_fs>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800788c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007890:	2b02      	cmp	r3, #2
 8007892:	d149      	bne.n	8007928 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007894:	2300      	movs	r3, #0
 8007896:	643b      	str	r3, [r7, #64]	@ 0x40
 8007898:	e01e      	b.n	80078d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80078a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80078a8:	4413      	add	r3, r2
 80078aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	3304      	adds	r3, #4
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d006      	beq.n	80078c4 <find_volume+0x158>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	3308      	adds	r3, #8
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd ff9e 	bl	80057fc <ld_dword>
 80078c0:	4602      	mov	r2, r0
 80078c2:	e000      	b.n	80078c6 <find_volume+0x15a>
 80078c4:	2200      	movs	r2, #0
 80078c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	3358      	adds	r3, #88	@ 0x58
 80078cc:	443b      	add	r3, r7
 80078ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d4:	3301      	adds	r3, #1
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d9dd      	bls.n	800789a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80078de:	2300      	movs	r3, #0
 80078e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <find_volume+0x182>
 80078e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ea:	3b01      	subs	r3, #1
 80078ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80078ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	3358      	adds	r3, #88	@ 0x58
 80078f4:	443b      	add	r3, r7
 80078f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80078fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <find_volume+0x1a2>
 8007902:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007904:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007906:	f7ff fedb 	bl	80076c0 <check_fs>
 800790a:	4603      	mov	r3, r0
 800790c:	e000      	b.n	8007910 <find_volume+0x1a4>
 800790e:	2303      	movs	r3, #3
 8007910:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007914:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007918:	2b01      	cmp	r3, #1
 800791a:	d905      	bls.n	8007928 <find_volume+0x1bc>
 800791c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800791e:	3301      	adds	r3, #1
 8007920:	643b      	str	r3, [r7, #64]	@ 0x40
 8007922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007924:	2b03      	cmp	r3, #3
 8007926:	d9e2      	bls.n	80078ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800792c:	2b04      	cmp	r3, #4
 800792e:	d101      	bne.n	8007934 <find_volume+0x1c8>
 8007930:	2301      	movs	r3, #1
 8007932:	e194      	b.n	8007c5e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007938:	2b01      	cmp	r3, #1
 800793a:	d901      	bls.n	8007940 <find_volume+0x1d4>
 800793c:	230d      	movs	r3, #13
 800793e:	e18e      	b.n	8007c5e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	3338      	adds	r3, #56	@ 0x38
 8007944:	330b      	adds	r3, #11
 8007946:	4618      	mov	r0, r3
 8007948:	f7fd ff40 	bl	80057cc <ld_word>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	899b      	ldrh	r3, [r3, #12]
 8007954:	429a      	cmp	r2, r3
 8007956:	d001      	beq.n	800795c <find_volume+0x1f0>
 8007958:	230d      	movs	r3, #13
 800795a:	e180      	b.n	8007c5e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800795c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795e:	3338      	adds	r3, #56	@ 0x38
 8007960:	3316      	adds	r3, #22
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd ff32 	bl	80057cc <ld_word>
 8007968:	4603      	mov	r3, r0
 800796a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800796c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <find_volume+0x214>
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	3338      	adds	r3, #56	@ 0x38
 8007976:	3324      	adds	r3, #36	@ 0x24
 8007978:	4618      	mov	r0, r3
 800797a:	f7fd ff3f 	bl	80057fc <ld_dword>
 800797e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007984:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	789b      	ldrb	r3, [r3, #2]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d005      	beq.n	80079a4 <find_volume+0x238>
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	789b      	ldrb	r3, [r3, #2]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d001      	beq.n	80079a4 <find_volume+0x238>
 80079a0:	230d      	movs	r3, #13
 80079a2:	e15c      	b.n	8007c5e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	789b      	ldrb	r3, [r3, #2]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ac:	fb02 f303 	mul.w	r3, r2, r3
 80079b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079b8:	461a      	mov	r2, r3
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	895b      	ldrh	r3, [r3, #10]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <find_volume+0x26c>
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	895b      	ldrh	r3, [r3, #10]
 80079ca:	461a      	mov	r2, r3
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	895b      	ldrh	r3, [r3, #10]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <find_volume+0x270>
 80079d8:	230d      	movs	r3, #13
 80079da:	e140      	b.n	8007c5e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	3338      	adds	r3, #56	@ 0x38
 80079e0:	3311      	adds	r3, #17
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fd fef2 	bl	80057cc <ld_word>
 80079e8:	4603      	mov	r3, r0
 80079ea:	461a      	mov	r2, r3
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	891b      	ldrh	r3, [r3, #8]
 80079f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f6:	8992      	ldrh	r2, [r2, #12]
 80079f8:	0952      	lsrs	r2, r2, #5
 80079fa:	b292      	uxth	r2, r2
 80079fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a00:	fb01 f202 	mul.w	r2, r1, r2
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <find_volume+0x2a8>
 8007a0c:	230d      	movs	r3, #13
 8007a0e:	e126      	b.n	8007c5e <find_volume+0x4f2>
 8007a10:	200001c0 	.word	0x200001c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	3338      	adds	r3, #56	@ 0x38
 8007a18:	3313      	adds	r3, #19
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd fed6 	bl	80057cc <ld_word>
 8007a20:	4603      	mov	r3, r0
 8007a22:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <find_volume+0x2cc>
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	3338      	adds	r3, #56	@ 0x38
 8007a2e:	3320      	adds	r3, #32
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fee3 	bl	80057fc <ld_dword>
 8007a36:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	3338      	adds	r3, #56	@ 0x38
 8007a3c:	330e      	adds	r3, #14
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fec4 	bl	80057cc <ld_word>
 8007a44:	4603      	mov	r3, r0
 8007a46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <find_volume+0x2e6>
 8007a4e:	230d      	movs	r3, #13
 8007a50:	e105      	b.n	8007c5e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a56:	4413      	add	r3, r2
 8007a58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a5a:	8911      	ldrh	r1, [r2, #8]
 8007a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a5e:	8992      	ldrh	r2, [r2, #12]
 8007a60:	0952      	lsrs	r2, r2, #5
 8007a62:	b292      	uxth	r2, r2
 8007a64:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d201      	bcs.n	8007a7a <find_volume+0x30e>
 8007a76:	230d      	movs	r3, #13
 8007a78:	e0f1      	b.n	8007c5e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a82:	8952      	ldrh	r2, [r2, #10]
 8007a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <find_volume+0x328>
 8007a90:	230d      	movs	r3, #13
 8007a92:	e0e4      	b.n	8007c5e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007a94:	2303      	movs	r3, #3
 8007a96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d802      	bhi.n	8007aaa <find_volume+0x33e>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d802      	bhi.n	8007aba <find_volume+0x34e>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	1c9a      	adds	r2, r3, #2
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ac8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007acc:	441a      	add	r2, r3
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007ad2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	441a      	add	r2, r3
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007adc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d11e      	bne.n	8007b22 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	3338      	adds	r3, #56	@ 0x38
 8007ae8:	332a      	adds	r3, #42	@ 0x2a
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fe6e 	bl	80057cc <ld_word>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <find_volume+0x38e>
 8007af6:	230d      	movs	r3, #13
 8007af8:	e0b1      	b.n	8007c5e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	891b      	ldrh	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <find_volume+0x39a>
 8007b02:	230d      	movs	r3, #13
 8007b04:	e0ab      	b.n	8007c5e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	3338      	adds	r3, #56	@ 0x38
 8007b0a:	332c      	adds	r3, #44	@ 0x2c
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd fe75 	bl	80057fc <ld_dword>
 8007b12:	4602      	mov	r2, r0
 8007b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b20:	e01f      	b.n	8007b62 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	891b      	ldrh	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <find_volume+0x3c2>
 8007b2a:	230d      	movs	r3, #13
 8007b2c:	e097      	b.n	8007c5e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b34:	441a      	add	r2, r3
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d103      	bne.n	8007b4a <find_volume+0x3de>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	e00a      	b.n	8007b60 <find_volume+0x3f4>
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	69da      	ldr	r2, [r3, #28]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	085a      	lsrs	r2, r3, #1
 8007b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b60:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	6a1a      	ldr	r2, [r3, #32]
 8007b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b68:	899b      	ldrh	r3, [r3, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6e:	440b      	add	r3, r1
 8007b70:	3b01      	subs	r3, #1
 8007b72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b74:	8989      	ldrh	r1, [r1, #12]
 8007b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d201      	bcs.n	8007b82 <find_volume+0x416>
 8007b7e:	230d      	movs	r3, #13
 8007b80:	e06d      	b.n	8007c5e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b88:	619a      	str	r2, [r3, #24]
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	2280      	movs	r2, #128	@ 0x80
 8007b96:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d149      	bne.n	8007c34 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	3338      	adds	r3, #56	@ 0x38
 8007ba4:	3330      	adds	r3, #48	@ 0x30
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd fe10 	bl	80057cc <ld_word>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d140      	bne.n	8007c34 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bba:	f7fe f8b7 	bl	8005d2c <move_window>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d137      	bne.n	8007c34 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	3338      	adds	r3, #56	@ 0x38
 8007bce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fdfa 	bl	80057cc <ld_word>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d127      	bne.n	8007c34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	3338      	adds	r3, #56	@ 0x38
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fd fe07 	bl	80057fc <ld_dword>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <find_volume+0x4fc>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d11e      	bne.n	8007c34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	3338      	adds	r3, #56	@ 0x38
 8007bfa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd fdfc 	bl	80057fc <ld_dword>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4a19      	ldr	r2, [pc, #100]	@ (8007c6c <find_volume+0x500>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d113      	bne.n	8007c34 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	3338      	adds	r3, #56	@ 0x38
 8007c10:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fd fdf1 	bl	80057fc <ld_dword>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	3338      	adds	r3, #56	@ 0x38
 8007c24:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fde7 	bl	80057fc <ld_dword>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007c3a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <find_volume+0x504>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	4b0a      	ldr	r3, [pc, #40]	@ (8007c70 <find_volume+0x504>)
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <find_volume+0x504>)
 8007c4a:	881a      	ldrh	r2, [r3, #0]
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	4a08      	ldr	r2, [pc, #32]	@ (8007c74 <find_volume+0x508>)
 8007c54:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c58:	f7fe f800 	bl	8005c5c <clear_lock>
#endif
	return FR_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3758      	adds	r7, #88	@ 0x58
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	41615252 	.word	0x41615252
 8007c6c:	61417272 	.word	0x61417272
 8007c70:	200001c4 	.word	0x200001c4
 8007c74:	200001e8 	.word	0x200001e8

08007c78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c82:	2309      	movs	r3, #9
 8007c84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01c      	beq.n	8007cc6 <validate+0x4e>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d018      	beq.n	8007cc6 <validate+0x4e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d013      	beq.n	8007cc6 <validate+0x4e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	889a      	ldrh	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	88db      	ldrh	r3, [r3, #6]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d10c      	bne.n	8007cc6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd fcea 	bl	800568c <disk_status>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <validate+0x4e>
			res = FR_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <validate+0x5a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	e000      	b.n	8007cd4 <validate+0x5c>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	6013      	str	r3, [r2, #0]
	return res;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007cf6:	f107 0310 	add.w	r3, r7, #16
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fc9c 	bl	8007638 <get_ldnumber>
 8007d00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	da01      	bge.n	8007d0c <f_mount+0x28>
 8007d08:	230b      	movs	r3, #11
 8007d0a:	e02b      	b.n	8007d64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d0c:	4a17      	ldr	r2, [pc, #92]	@ (8007d6c <f_mount+0x88>)
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d1c:	69b8      	ldr	r0, [r7, #24]
 8007d1e:	f7fd ff9d 	bl	8005c5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	490d      	ldr	r1, [pc, #52]	@ (8007d6c <f_mount+0x88>)
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <f_mount+0x66>
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d001      	beq.n	8007d4e <f_mount+0x6a>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e00a      	b.n	8007d64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d4e:	f107 010c 	add.w	r1, r7, #12
 8007d52:	f107 0308 	add.w	r3, r7, #8
 8007d56:	2200      	movs	r2, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fd07 	bl	800776c <find_volume>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	200001c0 	.word	0x200001c0

08007d70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b09a      	sub	sp, #104	@ 0x68
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <f_open+0x18>
 8007d84:	2309      	movs	r3, #9
 8007d86:	e1b7      	b.n	80080f8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007d90:	79fa      	ldrb	r2, [r7, #7]
 8007d92:	f107 0114 	add.w	r1, r7, #20
 8007d96:	f107 0308 	add.w	r3, r7, #8
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fce6 	bl	800776c <find_volume>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007da6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 819b 	bne.w	80080e6 <f_open+0x376>
		dj.obj.fs = fs;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	f107 0318 	add.w	r3, r7, #24
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fbc5 	bl	800754c <follow_path>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d118      	bne.n	8007e02 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da03      	bge.n	8007de2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007dda:	2306      	movs	r3, #6
 8007ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007de0:	e00f      	b.n	8007e02 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	bf8c      	ite	hi
 8007de8:	2301      	movhi	r3, #1
 8007dea:	2300      	movls	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	f107 0318 	add.w	r3, r7, #24
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd fde8 	bl	80059cc <chk_lock>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	f003 031c 	and.w	r3, r3, #28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d07f      	beq.n	8007f0c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d10e      	bne.n	8007e3a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e1c:	f7fd fe32 	bl	8005a84 <enq_lock>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <f_open+0xc4>
 8007e26:	f107 0318 	add.w	r3, r7, #24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff f894 	bl	8006f58 <dir_register>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e000      	b.n	8007e36 <f_open+0xc6>
 8007e34:	2312      	movs	r3, #18
 8007e36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	f043 0308 	orr.w	r3, r3, #8
 8007e40:	71fb      	strb	r3, [r7, #7]
 8007e42:	e010      	b.n	8007e66 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e44:	7fbb      	ldrb	r3, [r7, #30]
 8007e46:	f003 0311 	and.w	r3, r3, #17
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <f_open+0xe6>
					res = FR_DENIED;
 8007e4e:	2307      	movs	r3, #7
 8007e50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e54:	e007      	b.n	8007e66 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <f_open+0xf6>
 8007e60:	2308      	movs	r3, #8
 8007e62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d168      	bne.n	8007f40 <f_open+0x1d0>
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d063      	beq.n	8007f40 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007e78:	f7fd f9b8 	bl	80051ec <get_fattime>
 8007e7c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	330e      	adds	r3, #14
 8007e82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd fcf7 	bl	8005878 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	3316      	adds	r3, #22
 8007e8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fd fcf1 	bl	8005878 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	330b      	adds	r3, #11
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe fcc6 	bl	8006836 <ld_clust>
 8007eaa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fcde 	bl	8006874 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	331c      	adds	r3, #28
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd fcda 	bl	8005878 <st_dword>
					fs->wflag = 1;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d037      	beq.n	8007f40 <f_open+0x1d0>
						dw = fs->winsect;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007ed6:	f107 0318 	add.w	r3, r7, #24
 8007eda:	2200      	movs	r2, #0
 8007edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe f9ce 	bl	8006280 <remove_chain>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007eea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d126      	bne.n	8007f40 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fd ff18 	bl	8005d2c <move_window>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f06:	3a01      	subs	r2, #1
 8007f08:	615a      	str	r2, [r3, #20]
 8007f0a:	e019      	b.n	8007f40 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d115      	bne.n	8007f40 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f14:	7fbb      	ldrb	r3, [r7, #30]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007f1e:	2304      	movs	r3, #4
 8007f20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007f24:	e00c      	b.n	8007f40 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <f_open+0x1d0>
 8007f30:	7fbb      	ldrb	r3, [r7, #30]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <f_open+0x1d0>
						res = FR_DENIED;
 8007f3a:	2307      	movs	r3, #7
 8007f3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007f40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d126      	bne.n	8007f96 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bf8c      	ite	hi
 8007f6e:	2301      	movhi	r3, #1
 8007f70:	2300      	movls	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	f107 0318 	add.w	r3, r7, #24
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd fda3 	bl	8005ac8 <inc_lock>
 8007f82:	4602      	mov	r2, r0
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <f_open+0x226>
 8007f90:	2302      	movs	r3, #2
 8007f92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007f96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 80a3 	bne.w	80080e6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fc45 	bl	8006836 <ld_clust>
 8007fac:	4602      	mov	r2, r0
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	331c      	adds	r3, #28
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fd fc20 	bl	80057fc <ld_dword>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	88da      	ldrh	r2, [r3, #6]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	79fa      	ldrb	r2, [r7, #7]
 8007fda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3330      	adds	r3, #48	@ 0x30
 8007ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fd fc8a 	bl	8005912 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d06e      	beq.n	80080e6 <f_open+0x376>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d06a      	beq.n	80080e6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	895b      	ldrh	r3, [r3, #10]
 800801c:	461a      	mov	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	899b      	ldrh	r3, [r3, #12]
 8008022:	fb02 f303 	mul.w	r3, r2, r3
 8008026:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008034:	e016      	b.n	8008064 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd ff33 	bl	8005ea6 <get_fat>
 8008040:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008044:	2b01      	cmp	r3, #1
 8008046:	d802      	bhi.n	800804e <f_open+0x2de>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800804e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008054:	d102      	bne.n	800805c <f_open+0x2ec>
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800805c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800805e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008064:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008068:	2b00      	cmp	r3, #0
 800806a:	d103      	bne.n	8008074 <f_open+0x304>
 800806c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800806e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008070:	429a      	cmp	r2, r3
 8008072:	d8e0      	bhi.n	8008036 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008078:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800807a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800807e:	2b00      	cmp	r3, #0
 8008080:	d131      	bne.n	80080e6 <f_open+0x376>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	899b      	ldrh	r3, [r3, #12]
 8008086:	461a      	mov	r2, r3
 8008088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800808a:	fbb3 f1f2 	udiv	r1, r3, r2
 800808e:	fb01 f202 	mul.w	r2, r1, r2
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d026      	beq.n	80080e6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fee3 	bl	8005e68 <clust2sect>
 80080a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80080a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <f_open+0x342>
						res = FR_INT_ERR;
 80080aa:	2302      	movs	r3, #2
 80080ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80080b0:	e019      	b.n	80080e6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	899b      	ldrh	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80080be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c0:	441a      	add	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	7858      	ldrb	r0, [r3, #1]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	2301      	movs	r3, #1
 80080d6:	f7fd fb1b 	bl	8005710 <disk_read>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <f_open+0x376>
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80080e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <f_open+0x384>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80080f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3768      	adds	r7, #104	@ 0x68
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08e      	sub	sp, #56	@ 0x38
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f107 0214 	add.w	r2, r7, #20
 800811e:	4611      	mov	r1, r2
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fda9 	bl	8007c78 <validate>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800812c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008130:	2b00      	cmp	r3, #0
 8008132:	d107      	bne.n	8008144 <f_read+0x44>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	7d5b      	ldrb	r3, [r3, #21]
 8008138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800813c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <f_read+0x4a>
 8008144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008148:	e135      	b.n	80083b6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	7d1b      	ldrb	r3, [r3, #20]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <f_read+0x5a>
 8008156:	2307      	movs	r3, #7
 8008158:	e12d      	b.n	80083b6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	429a      	cmp	r2, r3
 800816c:	f240 811e 	bls.w	80083ac <f_read+0x2ac>
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008174:	e11a      	b.n	80083ac <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	8992      	ldrh	r2, [r2, #12]
 800817e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008182:	fb01 f202 	mul.w	r2, r1, r2
 8008186:	1a9b      	subs	r3, r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 80d5 	bne.w	8008338 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	8992      	ldrh	r2, [r2, #12]
 8008196:	fbb3 f3f2 	udiv	r3, r3, r2
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	8952      	ldrh	r2, [r2, #10]
 800819e:	3a01      	subs	r2, #1
 80081a0:	4013      	ands	r3, r2
 80081a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d12f      	bne.n	800820a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b8:	e013      	b.n	80081e2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7fe f956 	bl	800647a <clmt_clust>
 80081ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80081d0:	e007      	b.n	80081e2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fd fe63 	bl	8005ea6 <get_fat>
 80081e0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d804      	bhi.n	80081f2 <f_read+0xf2>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2202      	movs	r2, #2
 80081ec:	755a      	strb	r2, [r3, #21]
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0e1      	b.n	80083b6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f8:	d104      	bne.n	8008204 <f_read+0x104>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	755a      	strb	r2, [r3, #21]
 8008200:	2301      	movs	r3, #1
 8008202:	e0d8      	b.n	80083b6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008208:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f7fd fe28 	bl	8005e68 <clust2sect>
 8008218:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <f_read+0x12a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2202      	movs	r2, #2
 8008224:	755a      	strb	r2, [r3, #21]
 8008226:	2302      	movs	r3, #2
 8008228:	e0c5      	b.n	80083b6 <f_read+0x2b6>
			sect += csect;
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	899b      	ldrh	r3, [r3, #12]
 8008236:	461a      	mov	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	fbb3 f3f2 	udiv	r3, r3, r2
 800823e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d041      	beq.n	80082ca <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	4413      	add	r3, r2
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	8952      	ldrh	r2, [r2, #10]
 8008250:	4293      	cmp	r3, r2
 8008252:	d905      	bls.n	8008260 <f_read+0x160>
					cc = fs->csize - csect;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	895b      	ldrh	r3, [r3, #10]
 8008258:	461a      	mov	r2, r3
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	7858      	ldrb	r0, [r3, #1]
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800826a:	f7fd fa51 	bl	8005710 <disk_read>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <f_read+0x17e>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	755a      	strb	r2, [r3, #21]
 800827a:	2301      	movs	r3, #1
 800827c:	e09b      	b.n	80083b6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	7d1b      	ldrb	r3, [r3, #20]
 8008282:	b25b      	sxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	da18      	bge.n	80082ba <f_read+0x1ba>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008292:	429a      	cmp	r2, r3
 8008294:	d911      	bls.n	80082ba <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a1a      	ldr	r2, [r3, #32]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	8992      	ldrh	r2, [r2, #12]
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a8:	18d0      	adds	r0, r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	899b      	ldrh	r3, [r3, #12]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f7fd fb0b 	bl	80058d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	899b      	ldrh	r3, [r3, #12]
 80082be:	461a      	mov	r2, r3
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80082c8:	e05c      	b.n	8008384 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d02e      	beq.n	8008332 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	7d1b      	ldrb	r3, [r3, #20]
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da18      	bge.n	8008310 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	7858      	ldrb	r0, [r3, #1]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1a      	ldr	r2, [r3, #32]
 80082ec:	2301      	movs	r3, #1
 80082ee:	f7fd fa2f 	bl	8005750 <disk_write>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <f_read+0x202>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	755a      	strb	r2, [r3, #21]
 80082fe:	2301      	movs	r3, #1
 8008300:	e059      	b.n	80083b6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	7d1b      	ldrb	r3, [r3, #20]
 8008306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830a:	b2da      	uxtb	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	7858      	ldrb	r0, [r3, #1]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800831a:	2301      	movs	r3, #1
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	f7fd f9f7 	bl	8005710 <disk_read>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <f_read+0x232>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	755a      	strb	r2, [r3, #21]
 800832e:	2301      	movs	r3, #1
 8008330:	e041      	b.n	80083b6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	899b      	ldrh	r3, [r3, #12]
 800833c:	4618      	mov	r0, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	8992      	ldrh	r2, [r2, #12]
 8008346:	fbb3 f1f2 	udiv	r1, r3, r2
 800834a:	fb01 f202 	mul.w	r2, r1, r2
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	1ac3      	subs	r3, r0, r3
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d901      	bls.n	8008360 <f_read+0x260>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	8992      	ldrh	r2, [r2, #12]
 800836e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008372:	fb00 f202 	mul.w	r2, r0, r2
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	440b      	add	r3, r1
 800837a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837c:	4619      	mov	r1, r3
 800837e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008380:	f7fd faa6 	bl	80058d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	4413      	add	r3, r2
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008392:	441a      	add	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	619a      	str	r2, [r3, #24]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	441a      	add	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f47f aee1 	bne.w	8008176 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3738      	adds	r7, #56	@ 0x38
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f107 0208 	add.w	r2, r7, #8
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fc52 	bl	8007c78 <validate>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d168      	bne.n	80084b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d062      	beq.n	80084b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	7d1b      	ldrb	r3, [r3, #20]
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da15      	bge.n	8008420 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	7858      	ldrb	r0, [r3, #1]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1a      	ldr	r2, [r3, #32]
 8008402:	2301      	movs	r3, #1
 8008404:	f7fd f9a4 	bl	8005750 <disk_write>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <f_sync+0x54>
 800840e:	2301      	movs	r3, #1
 8008410:	e04f      	b.n	80084b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7d1b      	ldrb	r3, [r3, #20]
 8008416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841a:	b2da      	uxtb	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008420:	f7fc fee4 	bl	80051ec <get_fattime>
 8008424:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7fd fc7c 	bl	8005d2c <move_window>
 8008434:	4603      	mov	r3, r0
 8008436:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d138      	bne.n	80084b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008442:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	330b      	adds	r3, #11
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	330b      	adds	r3, #11
 800844e:	f042 0220 	orr.w	r2, r2, #32
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	461a      	mov	r2, r3
 8008460:	68f9      	ldr	r1, [r7, #12]
 8008462:	f7fe fa07 	bl	8006874 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f103 021c 	add.w	r2, r3, #28
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fd fa00 	bl	8005878 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3316      	adds	r3, #22
 800847c:	6939      	ldr	r1, [r7, #16]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fd f9fa 	bl	8005878 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3312      	adds	r3, #18
 8008488:	2100      	movs	r1, #0
 800848a:	4618      	mov	r0, r3
 800848c:	f7fd f9d9 	bl	8005842 <st_word>
					fs->wflag = 1;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2201      	movs	r2, #1
 8008494:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4618      	mov	r0, r3
 800849a:	f7fd fc75 	bl	8005d88 <sync_fs>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7d1b      	ldrb	r3, [r3, #20]
 80084a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff ff7b 	bl	80083be <f_sync>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d118      	bne.n	8008504 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f107 0208 	add.w	r2, r7, #8
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fbcc 	bl	8007c78 <validate>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10c      	bne.n	8008504 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fd fb78 	bl	8005be4 <dec_lock>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b0a0      	sub	sp, #128	@ 0x80
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800851a:	f107 010c 	add.w	r1, r7, #12
 800851e:	1d3b      	adds	r3, r7, #4
 8008520:	2202      	movs	r2, #2
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff f922 	bl	800776c <find_volume>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8008532:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 808e 	bne.w	8008658 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff f801 	bl	800754c <follow_path>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008550:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008554:	2b00      	cmp	r3, #0
 8008556:	d108      	bne.n	800856a <f_unlink+0x5c>
 8008558:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800855c:	2102      	movs	r1, #2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fd fa34 	bl	80059cc <chk_lock>
 8008564:	4603      	mov	r3, r0
 8008566:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800856a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800856e:	2b00      	cmp	r3, #0
 8008570:	d172      	bne.n	8008658 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008572:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8008576:	b25b      	sxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	da03      	bge.n	8008584 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800857c:	2306      	movs	r3, #6
 800857e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008582:	e008      	b.n	8008596 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008584:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008590:	2307      	movs	r3, #7
 8008592:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8008596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800859a:	2b00      	cmp	r3, #0
 800859c:	d134      	bne.n	8008608 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe f946 	bl	8006836 <ld_clust>
 80085aa:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80085ac:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d027      	beq.n	8008608 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80085bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085be:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80085c0:	f107 0310 	add.w	r3, r7, #16
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd ff8f 	bl	80064ea <dir_sdi>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 80085d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d116      	bne.n	8008608 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	2100      	movs	r1, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fb52 	bl	8006c8a <dir_read>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80085ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <f_unlink+0xec>
 80085f4:	2307      	movs	r3, #7
 80085f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80085fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d102      	bne.n	8008608 <f_unlink+0xfa>
 8008602:	2300      	movs	r3, #0
 8008604:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8008608:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800860c:	2b00      	cmp	r3, #0
 800860e:	d123      	bne.n	8008658 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008610:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fd97 	bl	8007148 <dir_remove>
 800861a:	4603      	mov	r3, r0
 800861c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008620:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10c      	bne.n	8008642 <f_unlink+0x134>
 8008628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800862e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008632:	2200      	movs	r2, #0
 8008634:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd fe22 	bl	8006280 <remove_chain>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008642:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008646:	2b00      	cmp	r3, #0
 8008648:	d106      	bne.n	8008658 <f_unlink+0x14a>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fb9b 	bl	8005d88 <sync_fs>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008658:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800865c:	4618      	mov	r0, r3
 800865e:	3780      	adds	r7, #128	@ 0x80
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800867a:	4b1f      	ldr	r3, [pc, #124]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d131      	bne.n	80086e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008684:	4b1c      	ldr	r3, [pc, #112]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 8008686:	7a5b      	ldrb	r3, [r3, #9]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 800868e:	2100      	movs	r1, #0
 8008690:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008692:	4b19      	ldr	r3, [pc, #100]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 8008694:	7a5b      	ldrb	r3, [r3, #9]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	4a17      	ldr	r2, [pc, #92]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086a2:	4b15      	ldr	r3, [pc, #84]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 80086a4:	7a5b      	ldrb	r3, [r3, #9]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	4b13      	ldr	r3, [pc, #76]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 80086ac:	4413      	add	r3, r2
 80086ae:	79fa      	ldrb	r2, [r7, #7]
 80086b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086b2:	4b11      	ldr	r3, [pc, #68]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 80086b4:	7a5b      	ldrb	r3, [r3, #9]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	b2d1      	uxtb	r1, r2
 80086bc:	4a0e      	ldr	r2, [pc, #56]	@ (80086f8 <FATFS_LinkDriverEx+0x94>)
 80086be:	7251      	strb	r1, [r2, #9]
 80086c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80086c2:	7dbb      	ldrb	r3, [r7, #22]
 80086c4:	3330      	adds	r3, #48	@ 0x30
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3301      	adds	r3, #1
 80086d0:	223a      	movs	r2, #58	@ 0x3a
 80086d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3302      	adds	r3, #2
 80086d8:	222f      	movs	r2, #47	@ 0x2f
 80086da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3303      	adds	r3, #3
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	200003e8 	.word	0x200003e8

080086fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008706:	2200      	movs	r2, #0
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff ffaa 	bl	8008664 <FATFS_LinkDriverEx>
 8008710:	4603      	mov	r3, r0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	2b7f      	cmp	r3, #127	@ 0x7f
 800872c:	d802      	bhi.n	8008734 <ff_convert+0x18>
		c = chr;
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	81fb      	strh	r3, [r7, #14]
 8008732:	e025      	b.n	8008780 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00b      	beq.n	8008752 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	2bff      	cmp	r3, #255	@ 0xff
 800873e:	d805      	bhi.n	800874c <ff_convert+0x30>
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	3b80      	subs	r3, #128	@ 0x80
 8008744:	4a12      	ldr	r2, [pc, #72]	@ (8008790 <ff_convert+0x74>)
 8008746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800874a:	e000      	b.n	800874e <ff_convert+0x32>
 800874c:	2300      	movs	r3, #0
 800874e:	81fb      	strh	r3, [r7, #14]
 8008750:	e016      	b.n	8008780 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008752:	2300      	movs	r3, #0
 8008754:	81fb      	strh	r3, [r7, #14]
 8008756:	e009      	b.n	800876c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008758:	89fb      	ldrh	r3, [r7, #14]
 800875a:	4a0d      	ldr	r2, [pc, #52]	@ (8008790 <ff_convert+0x74>)
 800875c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	429a      	cmp	r2, r3
 8008764:	d006      	beq.n	8008774 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008766:	89fb      	ldrh	r3, [r7, #14]
 8008768:	3301      	adds	r3, #1
 800876a:	81fb      	strh	r3, [r7, #14]
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008770:	d9f2      	bls.n	8008758 <ff_convert+0x3c>
 8008772:	e000      	b.n	8008776 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008774:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008776:	89fb      	ldrh	r3, [r7, #14]
 8008778:	3380      	adds	r3, #128	@ 0x80
 800877a:	b29b      	uxth	r3, r3
 800877c:	b2db      	uxtb	r3, r3
 800877e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008780:	89fb      	ldrh	r3, [r7, #14]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	08008a2c 	.word	0x08008a2c

08008794 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a4:	d201      	bcs.n	80087aa <ff_wtoupper+0x16>
 80087a6:	4b3e      	ldr	r3, [pc, #248]	@ (80088a0 <ff_wtoupper+0x10c>)
 80087a8:	e000      	b.n	80087ac <ff_wtoupper+0x18>
 80087aa:	4b3e      	ldr	r3, [pc, #248]	@ (80088a4 <ff_wtoupper+0x110>)
 80087ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	1c9a      	adds	r2, r3, #2
 80087b2:	617a      	str	r2, [r7, #20]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80087b8:	8a7b      	ldrh	r3, [r7, #18]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d068      	beq.n	8008890 <ff_wtoupper+0xfc>
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	8a7b      	ldrh	r3, [r7, #18]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d364      	bcc.n	8008890 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	617a      	str	r2, [r7, #20]
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	823b      	strh	r3, [r7, #16]
 80087d0:	8a3b      	ldrh	r3, [r7, #16]
 80087d2:	0a1b      	lsrs	r3, r3, #8
 80087d4:	81fb      	strh	r3, [r7, #14]
 80087d6:	8a3b      	ldrh	r3, [r7, #16]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	8a79      	ldrh	r1, [r7, #18]
 80087e0:	8a3b      	ldrh	r3, [r7, #16]
 80087e2:	440b      	add	r3, r1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	da49      	bge.n	800887c <ff_wtoupper+0xe8>
			switch (cmd) {
 80087e8:	89fb      	ldrh	r3, [r7, #14]
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d84f      	bhi.n	800888e <ff_wtoupper+0xfa>
 80087ee:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <ff_wtoupper+0x60>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008819 	.word	0x08008819
 80087f8:	0800882b 	.word	0x0800882b
 80087fc:	08008841 	.word	0x08008841
 8008800:	08008849 	.word	0x08008849
 8008804:	08008851 	.word	0x08008851
 8008808:	08008859 	.word	0x08008859
 800880c:	08008861 	.word	0x08008861
 8008810:	08008869 	.word	0x08008869
 8008814:	08008871 	.word	0x08008871
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	8a7b      	ldrh	r3, [r7, #18]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4413      	add	r3, r2
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	80fb      	strh	r3, [r7, #6]
 8008828:	e027      	b.n	800887a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	8a7b      	ldrh	r3, [r7, #18]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	b29b      	uxth	r3, r3
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	b29b      	uxth	r3, r3
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	80fb      	strh	r3, [r7, #6]
 800883e:	e01c      	b.n	800887a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	3b10      	subs	r3, #16
 8008844:	80fb      	strh	r3, [r7, #6]
 8008846:	e018      	b.n	800887a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	3b20      	subs	r3, #32
 800884c:	80fb      	strh	r3, [r7, #6]
 800884e:	e014      	b.n	800887a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	3b30      	subs	r3, #48	@ 0x30
 8008854:	80fb      	strh	r3, [r7, #6]
 8008856:	e010      	b.n	800887a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	3b1a      	subs	r3, #26
 800885c:	80fb      	strh	r3, [r7, #6]
 800885e:	e00c      	b.n	800887a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008860:	88fb      	ldrh	r3, [r7, #6]
 8008862:	3308      	adds	r3, #8
 8008864:	80fb      	strh	r3, [r7, #6]
 8008866:	e008      	b.n	800887a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	3b50      	subs	r3, #80	@ 0x50
 800886c:	80fb      	strh	r3, [r7, #6]
 800886e:	e004      	b.n	800887a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008876:	80fb      	strh	r3, [r7, #6]
 8008878:	bf00      	nop
			}
			break;
 800887a:	e008      	b.n	800888e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d195      	bne.n	80087ae <ff_wtoupper+0x1a>
 8008882:	8a3b      	ldrh	r3, [r7, #16]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4413      	add	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800888c:	e78f      	b.n	80087ae <ff_wtoupper+0x1a>
			break;
 800888e:	bf00      	nop
	}

	return chr;
 8008890:	88fb      	ldrh	r3, [r7, #6]
}
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	08008b2c 	.word	0x08008b2c
 80088a4:	08008d20 	.word	0x08008d20

080088a8 <memset>:
 80088a8:	4402      	add	r2, r0
 80088aa:	4603      	mov	r3, r0
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d100      	bne.n	80088b2 <memset+0xa>
 80088b0:	4770      	bx	lr
 80088b2:	f803 1b01 	strb.w	r1, [r3], #1
 80088b6:	e7f9      	b.n	80088ac <memset+0x4>

080088b8 <__libc_init_array>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	4d0d      	ldr	r5, [pc, #52]	@ (80088f0 <__libc_init_array+0x38>)
 80088bc:	4c0d      	ldr	r4, [pc, #52]	@ (80088f4 <__libc_init_array+0x3c>)
 80088be:	1b64      	subs	r4, r4, r5
 80088c0:	10a4      	asrs	r4, r4, #2
 80088c2:	2600      	movs	r6, #0
 80088c4:	42a6      	cmp	r6, r4
 80088c6:	d109      	bne.n	80088dc <__libc_init_array+0x24>
 80088c8:	4d0b      	ldr	r5, [pc, #44]	@ (80088f8 <__libc_init_array+0x40>)
 80088ca:	4c0c      	ldr	r4, [pc, #48]	@ (80088fc <__libc_init_array+0x44>)
 80088cc:	f000 f818 	bl	8008900 <_init>
 80088d0:	1b64      	subs	r4, r4, r5
 80088d2:	10a4      	asrs	r4, r4, #2
 80088d4:	2600      	movs	r6, #0
 80088d6:	42a6      	cmp	r6, r4
 80088d8:	d105      	bne.n	80088e6 <__libc_init_array+0x2e>
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e0:	4798      	blx	r3
 80088e2:	3601      	adds	r6, #1
 80088e4:	e7ee      	b.n	80088c4 <__libc_init_array+0xc>
 80088e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ea:	4798      	blx	r3
 80088ec:	3601      	adds	r6, #1
 80088ee:	e7f2      	b.n	80088d6 <__libc_init_array+0x1e>
 80088f0:	08008de4 	.word	0x08008de4
 80088f4:	08008de4 	.word	0x08008de4
 80088f8:	08008de4 	.word	0x08008de4
 80088fc:	08008de8 	.word	0x08008de8

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
